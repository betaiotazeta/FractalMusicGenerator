/*
 * Copyright: BetaZeta, 2021
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.betaiotazeta.fractalmusicgenerator;

//import com.formdev.flatlaf.FlatLightLaf;
//import com.formdev.flatlaf.FlatDarkLaf;
import com.aparapi.Kernel;
import com.formdev.flatlaf.FlatDarculaLaf;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.sound.midi.Sequencer;
import javax.sound.midi.VoiceStatus;
import javax.sound.sampled.SourceDataLine;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import javax.swing.Timer;
import javax.swing.ToolTipManager;

public class FmgApp extends javax.swing.JFrame {

    public FmgApp() {
        initComponents();
        kernel = new AKernel();
        if (executionModeExitCode == 2) kernel.setExecutionMode(Kernel.EXECUTION_MODE.JTP);
        audioExecutorService = Executors.newCachedThreadPool();
        fractalExecutorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS,
                new ArrayBlockingQueue<Runnable>(1), new ThreadPoolExecutor.DiscardOldestPolicy());
        cfg = new Configurator();
        renderManager = new RenderManager(this);
        soundGenerator = new SoundGenerator(this);
        persistence = new Persistence(this);
        soundbankManager = new SoundbankManager(this);
        deviceManager = new DeviceManager(this);
        updateConfiguratorFromGui();
        updateInfoLabels();
        soundbankManager.fillInstrumentsMelodyList();
        soundbankManager.fillDrumkitsList();
        deviceManager.fillExternalDevicesTable();
        Utilities.setTextAreaBufferLimiter(tab1TextArea);
        setupIcons();
        setupGui();
        ToolTipManager.sharedInstance().setDismissDelay(toolTipDismissDelay);
        
        // window listener to do stuff after gui is loaded
        // and dispose resources on user exit
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent windowEvent) {
                colorPanel.applyPreset(colorPanel.WIKIPATTERN);
                String renderer;
                if (executionModeExitCode == 0) {
                    renderer = "Graphics: " + kernel.getTargetDevice().getShortDescription();
                } else {
                    renderer = "Graphics: Java Thread Pool";
                }
                gpuInfoLabel.setText(renderer);
            }
            
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                String title = "Closing Application";
                String message = "Really quit?" + nl;
                int reply = JOptionPane.showConfirmDialog(FmgApp.this, message, title, JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.NO_OPTION) {
                    return;
                }
                persistence.saveOnExit();
                kernel.dispose();
                resetSound();
                deviceManager.closeAll();
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        waveTypeButtonGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        tab1MainPanel = new javax.swing.JPanel();
        tab1ControlsSplitPane = new javax.swing.JSplitPane();
        tab1FractalSplitPane = new javax.swing.JSplitPane();
        tab1AreaScrollPane = new javax.swing.JScrollPane();
        tab1TextArea = new javax.swing.JTextArea();
        fractalPanel = new org.betaiotazeta.fractalmusicgenerator.FractalPanel(this);
        tab1ControlsScrollPane = new javax.swing.JScrollPane();
        tab1ControlsPanel = new javax.swing.JPanel();
        fractalControlPanel = new javax.swing.JPanel();
        fractalsComboBox = new javax.swing.JComboBox<>();
        imageIterationsPanel = new javax.swing.JPanel();
        maxImageIterationsSlider = new javax.swing.JSlider();
        audioIterationPanel = new javax.swing.JPanel();
        maxAudioIterationsSlider = new javax.swing.JSlider();
        audioTypePanel = new javax.swing.JPanel();
        waveToggleButton = new javax.swing.JToggleButton();
        melodyToggleButton = new javax.swing.JToggleButton();
        drumsToggleButton = new javax.swing.JToggleButton();
        performancePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        smoothCheckBox = new javax.swing.JCheckBox();
        histogramCheckBox = new javax.swing.JCheckBox();
        verboseCheckBox = new javax.swing.JCheckBox();
        drawCoordinatesCheckBox = new javax.swing.JCheckBox();
        drawOrbitsCheckBox = new javax.swing.JCheckBox();
        autoImageIterationsCheckBox = new javax.swing.JCheckBox();
        loopingCheckBox = new javax.swing.JCheckBox();
        informationsPanel = new javax.swing.JPanel();
        gpuInfoLabel = new javax.swing.JLabel();
        threadsInfoLabel = new javax.swing.JLabel();
        voicesInfoLabel = new javax.swing.JLabel();
        writeInfoLabel = new javax.swing.JLabel();
        renderingInfoLabel = new javax.swing.JLabel();
        speedPanel = new javax.swing.JPanel();
        outlineSpeedSlider = new javax.swing.JSlider();
        randomnessPanel = new javax.swing.JPanel();
        outlineSpeedRandomnessSlider = new javax.swing.JSlider();
        skipPanel = new javax.swing.JPanel();
        outlineSkipSlider = new javax.swing.JSlider();
        playPanel = new javax.swing.JPanel();
        outlinePlayButton = new javax.swing.JButton();
        lockOutlineToggleButton = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        tab2MainPanel = new javax.swing.JPanel();
        tab2GridBagPanel = new javax.swing.JPanel();
        waveSourcePanel = new javax.swing.JPanel();
        directRadioButton = new javax.swing.JRadioButton();
        sineRadioButton = new javax.swing.JRadioButton();
        maxSdlPanel = new javax.swing.JPanel();
        maxSdlSlider = new javax.swing.JSlider();
        generalWaveControlsPanel = new javax.swing.JPanel();
        bufferSizeLabel = new javax.swing.JLabel();
        interpolationPointsLabel = new javax.swing.JLabel();
        keepOrbitLabel = new javax.swing.JLabel();
        bufferPollingLabel = new javax.swing.JLabel();
        skipDivergentWaveCheckBox = new javax.swing.JCheckBox();
        interpolationPointsSpinner = new javax.swing.JSpinner();
        keepOrbitSpinner = new javax.swing.JSpinner();
        bufferSizeSpinner = new javax.swing.JSpinner();
        bufferPollingSpinner = new javax.swing.JSpinner();
        volumeWavePanel = new javax.swing.JPanel();
        volumeWaveSlider = new javax.swing.JSlider();
        directConversionPanel = new javax.swing.JPanel();
        directLeftConversionPanel = new javax.swing.JPanel();
        minZxDirectLabel = new javax.swing.JLabel();
        minZxDirectSpinner = new javax.swing.JSpinner();
        maxZxDirectLabel = new javax.swing.JLabel();
        maxZxDirectSpinner = new javax.swing.JSpinner();
        directRightConversionPanel = new javax.swing.JPanel();
        minZyDirectLabel = new javax.swing.JLabel();
        maxZyDirectLabel = new javax.swing.JLabel();
        minZyDirectSpinner = new javax.swing.JSpinner();
        maxZyDirectSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        sineConversionPanel = new javax.swing.JPanel();
        minZySineLabel = new javax.swing.JLabel();
        maxZySineLabel = new javax.swing.JLabel();
        minFreqLabel = new javax.swing.JLabel();
        maxFreqLabel = new javax.swing.JLabel();
        minZySineSpinner = new javax.swing.JSpinner();
        maxZySineSpinner = new javax.swing.JSpinner();
        minFreqSpinner = new javax.swing.JSpinner();
        maxFreqSpinner = new javax.swing.JSpinner();
        durationWavePanel = new javax.swing.JPanel();
        durationWaveSlider = new javax.swing.JSlider();
        tab3MainPanel = new javax.swing.JPanel();
        tab3GridBagPanel = new javax.swing.JPanel();
        maxSequencersPanel = new javax.swing.JPanel();
        maxSequencersSlider = new javax.swing.JSlider();
        noteVelocityPanel = new javax.swing.JPanel();
        noteVelocitySlider = new javax.swing.JSlider();
        generalMidiControlsPanel = new javax.swing.JPanel();
        skipDivergentMidiCheckBox = new javax.swing.JCheckBox();
        preventInterruptionsCheckBox = new javax.swing.JCheckBox();
        panMidiEffectCheckBox = new javax.swing.JCheckBox();
        instrChangeEffectCheckBox = new javax.swing.JCheckBox();
        initInstrumentsCheckBox = new javax.swing.JCheckBox();
        realConversionPanel = new javax.swing.JPanel();
        minZxMidiLabel = new javax.swing.JLabel();
        minZxMidiSpinner = new javax.swing.JSpinner();
        maxZxMidiLabel = new javax.swing.JLabel();
        maxZxMidiSpinner = new javax.swing.JSpinner();
        minMidiEffectLabel = new javax.swing.JLabel();
        minMidiEffectSpinner = new javax.swing.JSpinner();
        maxMidiEffectLabel = new javax.swing.JLabel();
        maxMidiEffectSpinner = new javax.swing.JSpinner();
        imaginaryConversionPanel = new javax.swing.JPanel();
        minZyMidiLabel = new javax.swing.JLabel();
        maxZyMidiLabel = new javax.swing.JLabel();
        minZyMidiSpinner = new javax.swing.JSpinner();
        maxZyMidiSpinner = new javax.swing.JSpinner();
        minNoteLabel = new javax.swing.JLabel();
        minNoteSpinner = new javax.swing.JSpinner();
        maxNoteLabel = new javax.swing.JLabel();
        maxNoteSpinner = new javax.swing.JSpinner();
        sequenceSpeedPanel = new javax.swing.JPanel();
        sequenceSpeedSlider = new javax.swing.JSlider();
        noteDurationPanel = new javax.swing.JPanel();
        noteDurationSlider = new javax.swing.JSlider();
        reverbPanel = new javax.swing.JPanel();
        reverbSlider = new javax.swing.JSlider();
        chorusPanel = new javax.swing.JPanel();
        chorusSlider = new javax.swing.JSlider();
        tab4MainPanel = new javax.swing.JPanel();
        instrumentsPanel = new javax.swing.JPanel();
        instrumentsScrollPane = new javax.swing.JScrollPane();
        instrumentsMelodyList = new javax.swing.JList<>();
        tab5MainPanel = new javax.swing.JPanel();
        tab5GridBagPanel = new javax.swing.JPanel();
        drumsNoteDurationPanel = new javax.swing.JPanel();
        drumsNoteDurationSlider = new javax.swing.JSlider();
        drumsSequenceSpeedPanel = new javax.swing.JPanel();
        drumsSequenceSpeedSlider = new javax.swing.JSlider();
        drumsMaxSequencersPanel = new javax.swing.JPanel();
        drumsMaxSequencersSlider = new javax.swing.JSlider();
        drumsReverbPanel = new javax.swing.JPanel();
        drumsReverbSlider = new javax.swing.JSlider();
        drumsChorusPanel = new javax.swing.JPanel();
        drumsChorusSlider = new javax.swing.JSlider();
        drumsVelocityPanel = new javax.swing.JPanel();
        drumsVelocitySlider = new javax.swing.JSlider();
        drumsImaginaryConversionPanel = new javax.swing.JPanel();
        drumsMinZyMidiLabel = new javax.swing.JLabel();
        drumsMinZyMidiSpinner = new javax.swing.JSpinner();
        drumsMaxZyMidiLabel = new javax.swing.JLabel();
        drumsMinNoteLabel = new javax.swing.JLabel();
        drumsMaxNoteLabel = new javax.swing.JLabel();
        drumsMaxZyMidiSpinner = new javax.swing.JSpinner();
        drumsMinNoteSpinner = new javax.swing.JSpinner();
        drumsMaxNoteSpinner = new javax.swing.JSpinner();
        drumsRealConversionPanel = new javax.swing.JPanel();
        drumsMinZxMidiLabel = new javax.swing.JLabel();
        drumsMinZxMidiSpinner = new javax.swing.JSpinner();
        drumsMaxZxMidiLabel = new javax.swing.JLabel();
        drumsMinMidiEffectLabel = new javax.swing.JLabel();
        drumsMaxMidiEffectLabel = new javax.swing.JLabel();
        drumsMaxZxMidiSpinner = new javax.swing.JSpinner();
        drumsMinMidiEffectSpinner = new javax.swing.JSpinner();
        drumsMaxMidiEffectSpinner = new javax.swing.JSpinner();
        drumsGeneralMidiControlsPanel = new javax.swing.JPanel();
        drumsSkipDivergentMidiCheckBox = new javax.swing.JCheckBox();
        drumsPreventInterruptionsCheckBox = new javax.swing.JCheckBox();
        drumsPanMidiEffectCheckBox = new javax.swing.JCheckBox();
        drumsChangeEffectCheckBox = new javax.swing.JCheckBox();
        drumsInitInstrumentsCheckBox = new javax.swing.JCheckBox();
        tab6MainPanel = new javax.swing.JPanel();
        drumkitsPanel = new javax.swing.JPanel();
        drumkitsScrollPane = new javax.swing.JScrollPane();
        drumkitsList = new javax.swing.JList<>();
        tab7MainPanel = new javax.swing.JPanel();
        externalDevicesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        externalDevicesTable = new javax.swing.JTable() {
            @Override
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend)
            {
                //Always toggle on single selection
                super.changeSelection(rowIndex, columnIndex, true, false);
            }
        };
        toggleDevicesPanel = new javax.swing.JPanel();
        gervillToggleButton = new javax.swing.JToggleButton();
        jackToggleButton = new javax.swing.JToggleButton();
        dumpToggleButton = new javax.swing.JToggleButton();
        updateDevicesTablePanel = new javax.swing.JPanel();
        updateDevicesTableButton = new javax.swing.JButton();
        recorderPanel = new javax.swing.JPanel();
        recorderToggleButton = new javax.swing.JToggleButton();
        tab8MainPanel = new javax.swing.JPanel();
        colorSetupPanel = new javax.swing.JPanel();
        color0Button = new javax.swing.JButton();
        color1Button = new javax.swing.JButton();
        color2Button = new javax.swing.JButton();
        color3Button = new javax.swing.JButton();
        color4Button = new javax.swing.JButton();
        color7Button = new javax.swing.JButton();
        color6Button = new javax.swing.JButton();
        color5Button = new javax.swing.JButton();
        color8Button = new javax.swing.JButton();
        color0Slider = new javax.swing.JSlider();
        color1Slider = new javax.swing.JSlider();
        color2Slider = new javax.swing.JSlider();
        color3Slider = new javax.swing.JSlider();
        color4Slider = new javax.swing.JSlider();
        color5Slider = new javax.swing.JSlider();
        color6Slider = new javax.swing.JSlider();
        color7Slider = new javax.swing.JSlider();
        color8Slider = new javax.swing.JSlider();
        color9Button = new javax.swing.JButton();
        palettePresetsLabel = new javax.swing.JLabel();
        presetHueButton = new javax.swing.JButton();
        presetBlankButton = new javax.swing.JButton();
        presetWikiButton = new javax.swing.JButton();
        presetRandomButton = new javax.swing.JButton();
        paletteDensitySpinner = new javax.swing.JSpinner();
        paletteDensityLabel = new javax.swing.JLabel();
        colorPanel = new org.betaiotazeta.fractalmusicgenerator.ColorPanel(this);
        menuBar = new javax.swing.JMenuBar();
        projectMenu = new javax.swing.JMenu();
        openProjectMenuItem = new javax.swing.JMenuItem();
        saveProjectMenuItem = new javax.swing.JMenuItem();
        menuProjectSeparator = new javax.swing.JPopupMenu.Separator();
        presetsProjectMenuItem = new javax.swing.JMenuItem();
        soundbankMenu = new javax.swing.JMenu();
        loadSoundbankMenuItem = new javax.swing.JMenuItem();
        loadDefaultSoundbankMenuItem = new javax.swing.JMenuItem();
        unloadAllInstrumentsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        websiteMenuItem = new javax.swing.JMenuItem();
        youtubeMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        menuHelpSeparator = new javax.swing.JPopupMenu.Separator();
        donateMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Fractal Music Generator");

        tab1MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tab1ControlsSplitPane.setDividerLocation(378);
        tab1ControlsSplitPane.setResizeWeight(0.95);
        tab1ControlsSplitPane.setOneTouchExpandable(true);

        tab1FractalSplitPane.setDividerLocation(250);
        tab1FractalSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        tab1FractalSplitPane.setResizeWeight(0.9);
        tab1FractalSplitPane.setOneTouchExpandable(true);

        tab1TextArea.setEditable(false);
        tab1AreaScrollPane.setViewportView(tab1TextArea);

        tab1FractalSplitPane.setRightComponent(tab1AreaScrollPane);
        new SmartScroller(tab1AreaScrollPane);

        fractalPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        javax.swing.GroupLayout fractalPanelLayout = new javax.swing.GroupLayout(fractalPanel);
        fractalPanel.setLayout(fractalPanelLayout);
        fractalPanelLayout.setHorizontalGroup(
            fractalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fractalPanelLayout.setVerticalGroup(
            fractalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tab1FractalSplitPane.setLeftComponent(fractalPanel);

        tab1ControlsSplitPane.setLeftComponent(tab1FractalSplitPane);

        tab1ControlsScrollPane.setBorder(null);
        tab1ControlsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tab1ControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        fractalControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Fractal"));
        fractalControlPanel.setPreferredSize(new java.awt.Dimension(222, 61));

        fractalsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mandelbrot", "Burning Ship", "Tricorn", "Rectangle", "Klingon D7", "Crown", "Frog", "Mandelship", "Frankenstein", "Logistic" }));
        fractalsComboBox.setToolTipText("A fractal to be rendered.");
        fractalsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fractalsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fractalControlPanelLayout = new javax.swing.GroupLayout(fractalControlPanel);
        fractalControlPanel.setLayout(fractalControlPanelLayout);
        fractalControlPanelLayout.setHorizontalGroup(
            fractalControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fractalControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fractalsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        fractalControlPanelLayout.setVerticalGroup(
            fractalControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fractalControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fractalsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        imageIterationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Iterations"));

        maxImageIterationsSlider.setMajorTickSpacing(2000);
        maxImageIterationsSlider.setMaximum(10000);
        maxImageIterationsSlider.setMinimum(100);
        maxImageIterationsSlider.setMinorTickSpacing(500);
        maxImageIterationsSlider.setPaintLabels(true);
        maxImageIterationsSlider.setPaintTicks(true);
        maxImageIterationsSlider.setToolTipText("<html>\nHigher values improve image details but will slow down rendering time.<br>\nIrrelevant for audio.\n</html>");
        maxImageIterationsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxImageIterationsSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout imageIterationsPanelLayout = new javax.swing.GroupLayout(imageIterationsPanel);
        imageIterationsPanel.setLayout(imageIterationsPanelLayout);
        imageIterationsPanelLayout.setHorizontalGroup(
            imageIterationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageIterationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxImageIterationsSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        imageIterationsPanelLayout.setVerticalGroup(
            imageIterationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageIterationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxImageIterationsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        audioIterationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Audio Interations"));

        maxAudioIterationsSlider.setMajorTickSpacing(2000);
        maxAudioIterationsSlider.setMaximum(5000);
        maxAudioIterationsSlider.setMinimum(100);
        maxAudioIterationsSlider.setMinorTickSpacing(100);
        maxAudioIterationsSlider.setPaintLabels(true);
        maxAudioIterationsSlider.setPaintTicks(true);
        maxAudioIterationsSlider.setToolTipText("<html>\nIncreasing this value is almost <strong>never</strong> useful and will waste calculations!<br>\nFor every pixel this amount of orbits is precalculated and subsequently repeated if necessary by looping.<br>\nMay help to avoid clicks for wave audio or to prevent a midi reset when a sequence is played until the end.\n</html>");
        maxAudioIterationsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxAudioIterationsSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout audioIterationPanelLayout = new javax.swing.GroupLayout(audioIterationPanel);
        audioIterationPanel.setLayout(audioIterationPanelLayout);
        audioIterationPanelLayout.setHorizontalGroup(
            audioIterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioIterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxAudioIterationsSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        audioIterationPanelLayout.setVerticalGroup(
            audioIterationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioIterationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxAudioIterationsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        audioTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Audio Type"));
        audioTypePanel.setLayout(new java.awt.GridLayout(1, 0));

        waveToggleButton.setSelected(true);
        waveToggleButton.setText("Wave");
        waveToggleButton.setToolTipText("<html>\nPCM audio is generated from orbit values directly or by<br>\nusing these to determine the frequencies of sine waves.<br>\n<strong>Midi is not involved!</strong>\n</html>");
        audioTypePanel.add(waveToggleButton);

        melodyToggleButton.setSelected(true);
        melodyToggleButton.setText("Melody");
        melodyToggleButton.setToolTipText("<html>MIDI data generated from orbit values<br>\nis played on channels 1-9 and 11-16<br>\nwith patches selected in Instruments tab.</html>");
        audioTypePanel.add(melodyToggleButton);

        drumsToggleButton.setText("Drums");
        drumsToggleButton.setToolTipText("<html>MIDI data generated from orbit values<br>\nis played on channel 10 for drums<br>\nwith drumkits selected in Drumkits tab.</html>");
        audioTypePanel.add(drumsToggleButton);

        performancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Performance"));
        performancePanel.setLayout(new java.awt.GridBagLayout());

        smoothCheckBox.setText("Smooth");
        smoothCheckBox.setToolTipText("<html>\nFills regions of uniform color with gradients.<br>\nA bit nicer, a little slower.\n</html>");
        smoothCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smoothCheckBoxActionPerformed(evt);
            }
        });

        histogramCheckBox.setSelected(true);
        histogramCheckBox.setText("Histogram");
        histogramCheckBox.setToolTipText("<html>\nDistribute all colors from the palette proportionally.<br>\nSometimes beautiful but very <strong>slow</strong>!\n</html>");
        histogramCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramCheckBoxActionPerformed(evt);
            }
        });

        verboseCheckBox.setText("Verbose");
        verboseCheckBox.setToolTipText("<html>\nUseful to determine if an orbit is out of conversion range<br>\nor a pixel is not in set (divergent).\n</html>");

        drawCoordinatesCheckBox.setText("Draw coordinates");
        drawCoordinatesCheckBox.setToolTipText("Helps to determine the conversion range.");
        drawCoordinatesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCoordinatesCheckBoxActionPerformed(evt);
            }
        });

        drawOrbitsCheckBox.setSelected(true);
        drawOrbitsCheckBox.setText("Draw orbits");
        drawOrbitsCheckBox.setToolTipText("Deselecting may help to reduce computations.");

        autoImageIterationsCheckBox.setSelected(true);
        autoImageIterationsCheckBox.setText("Auto image iterations");
        autoImageIterationsCheckBox.setToolTipText("Image iterations will be automatically adjusted while zooming.");
        autoImageIterationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoImageIterationsCheckBoxActionPerformed(evt);
            }
        });

        loopingCheckBox.setText("Play loops");
        loopingCheckBox.setToolTipText("Repeat the outline but start with a different pixel.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(autoImageIterationsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loopingCheckBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(smoothCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(histogramCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verboseCheckBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(drawCoordinatesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawOrbitsCheckBox))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verboseCheckBox)
                    .addComponent(smoothCheckBox)
                    .addComponent(histogramCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawCoordinatesCheckBox)
                    .addComponent(drawOrbitsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loopingCheckBox)
                    .addComponent(autoImageIterationsCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        performancePanel.add(jPanel1, gridBagConstraints);

        informationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Informations"));

        gpuInfoLabel.setText("GPU:");
        gpuInfoLabel.setToolTipText("GPU should be reported: requires OpenCL.");

        threadsInfoLabel.setText("Threads:");

        voicesInfoLabel.setText("Voices:");

        writeInfoLabel.setText("Write:");

        renderingInfoLabel.setText("Fractal rendering:");

        javax.swing.GroupLayout informationsPanelLayout = new javax.swing.GroupLayout(informationsPanel);
        informationsPanel.setLayout(informationsPanelLayout);
        informationsPanelLayout.setHorizontalGroup(
            informationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gpuInfoLabel)
                    .addComponent(threadsInfoLabel)
                    .addComponent(voicesInfoLabel)
                    .addComponent(writeInfoLabel)
                    .addComponent(renderingInfoLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        informationsPanelLayout.setVerticalGroup(
            informationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gpuInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renderingInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(threadsInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(voicesInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(writeInfoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        speedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Outline Speed"));

        outlineSpeedSlider.setMajorTickSpacing(500);
        outlineSpeedSlider.setMaximum(2000);
        outlineSpeedSlider.setMinimum(10);
        outlineSpeedSlider.setMinorTickSpacing(100);
        outlineSpeedSlider.setPaintLabels(true);
        outlineSpeedSlider.setPaintTicks(true);
        outlineSpeedSlider.setToolTipText("<html>\nInterval of time between each pixel when played.<br>\nOld pixels will be discarded when all dedicated<br>\naudio lines / midi sequencers are busy.\n</html>");
        outlineSpeedSlider.setValue(500);
        outlineSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outlineSpeedSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout speedPanelLayout = new javax.swing.GroupLayout(speedPanel);
        speedPanel.setLayout(speedPanelLayout);
        speedPanelLayout.setHorizontalGroup(
            speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        speedPanelLayout.setVerticalGroup(
            speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        randomnessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Outline Speed Randomness"));

        outlineSpeedRandomnessSlider.setMajorTickSpacing(100);
        outlineSpeedRandomnessSlider.setMaximum(501);
        outlineSpeedRandomnessSlider.setMinimum(1);
        outlineSpeedRandomnessSlider.setMinorTickSpacing(50);
        outlineSpeedRandomnessSlider.setPaintLabels(true);
        outlineSpeedRandomnessSlider.setPaintTicks(true);
        outlineSpeedRandomnessSlider.setToolTipText("<html>\nAdds a random amount of time between each pixel when played.<br>\nUseful to avoid too many events happening toghether and to<br>\nmimic different note duration.\n</html>");
        outlineSpeedRandomnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outlineSpeedRandomnessSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout randomnessPanelLayout = new javax.swing.GroupLayout(randomnessPanel);
        randomnessPanel.setLayout(randomnessPanelLayout);
        randomnessPanelLayout.setHorizontalGroup(
            randomnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomnessPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSpeedRandomnessSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        randomnessPanelLayout.setVerticalGroup(
            randomnessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomnessPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSpeedRandomnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        skipPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Outline Values Skipping"));

        outlineSkipSlider.setMajorTickSpacing(20);
        outlineSkipSlider.setMinorTickSpacing(5);
        outlineSkipSlider.setPaintLabels(true);
        outlineSkipSlider.setPaintTicks(true);
        outlineSkipSlider.setToolTipText("<html>\nInstead of taking an outline snapshot with a smaller window<br>\nit is possible to skip pixels without incrementing speed.\n</html>");
        outlineSkipSlider.setValue(0);
        outlineSkipSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outlineSkipSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout skipPanelLayout = new javax.swing.GroupLayout(skipPanel);
        skipPanel.setLayout(skipPanelLayout);
        skipPanelLayout.setHorizontalGroup(
            skipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSkipSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        skipPanelLayout.setVerticalGroup(
            skipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlineSkipSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        playPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Outline Play"));
        playPanel.setLayout(new java.awt.GridLayout(1, 0));

        outlinePlayButton.setText("Play");
        outlinePlayButton.setToolTipText("<html>\nDetect the displayed outline of in set regions and play them.<br>\nZoom or pan the image for a different selection.\n</html>");
        outlinePlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlinePlayButtonActionPerformed(evt);
            }
        });
        playPanel.add(outlinePlayButton);

        lockOutlineToggleButton.setSelected(true);
        lockOutlineToggleButton.setText("Lock");
        lockOutlineToggleButton.setToolTipText("<html>\nUnlock the detected outline to play different pixels<br>\nwhile zooming or pannig the fractal image during play.\n</html>");
        lockOutlineToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockOutlineToggleButtonActionPerformed(evt);
            }
        });
        playPanel.add(lockOutlineToggleButton);

        resetButton.setText("Reset");
        resetButton.setToolTipText("Resets detected outline and stops audio activity.");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        playPanel.add(resetButton);

        javax.swing.GroupLayout tab1ControlsPanelLayout = new javax.swing.GroupLayout(tab1ControlsPanel);
        tab1ControlsPanel.setLayout(tab1ControlsPanelLayout);
        tab1ControlsPanelLayout.setHorizontalGroup(
            tab1ControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1ControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab1ControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(randomnessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(speedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(informationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(audioIterationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageIterationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fractalControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                    .addComponent(skipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(audioTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(performancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        tab1ControlsPanelLayout.setVerticalGroup(
            tab1ControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1ControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fractalControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageIterationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(audioIterationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(audioTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(performancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomnessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tab1ControlsScrollPane.setViewportView(tab1ControlsPanel);

        tab1ControlsSplitPane.setRightComponent(tab1ControlsScrollPane);

        javax.swing.GroupLayout tab1MainPanelLayout = new javax.swing.GroupLayout(tab1MainPanel);
        tab1MainPanel.setLayout(tab1MainPanelLayout);
        tab1MainPanelLayout.setHorizontalGroup(
            tab1MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab1ControlsSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                .addContainerGap())
        );
        tab1MainPanelLayout.setVerticalGroup(
            tab1MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab1ControlsSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Fractal", tab1MainPanel);

        tab2MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tab2MainPanel.setLayout(new java.awt.GridBagLayout());

        waveSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Wave Source"));
        waveSourcePanel.setPreferredSize(new java.awt.Dimension(222, 83));

        waveTypeButtonGroup.add(directRadioButton);
        directRadioButton.setText("Direct data");
        directRadioButton.setToolTipText("<html>\nOrbit value is scaled to wave amplitude (loudness, volume).<br>\nAdjust (interpolation, keep orbit) values accordingly.\n</html>");
        directRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directRadioButtonActionPerformed(evt);
            }
        });

        waveTypeButtonGroup.add(sineRadioButton);
        sineRadioButton.setSelected(true);
        sineRadioButton.setText("Sine data");
        sineRadioButton.setToolTipText("<html>\nOrbit value is used to determine the frequency (pitch) of a sine wave.<br>\nAdjust (interpolation, keep orbit) values accordingly.\n</html>");
        sineRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sineRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout waveSourcePanelLayout = new javax.swing.GroupLayout(waveSourcePanel);
        waveSourcePanel.setLayout(waveSourcePanelLayout);
        waveSourcePanelLayout.setHorizontalGroup(
            waveSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waveSourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waveSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directRadioButton)
                    .addComponent(sineRadioButton))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        waveSourcePanelLayout.setVerticalGroup(
            waveSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waveSourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(directRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sineRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        maxSdlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Maximum poliphony"));
        maxSdlPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        maxSdlSlider.setMajorTickSpacing(10);
        maxSdlSlider.setMaximum(55);
        maxSdlSlider.setMinimum(1);
        maxSdlSlider.setMinorTickSpacing(1);
        maxSdlSlider.setPaintLabels(true);
        maxSdlSlider.setPaintTicks(true);
        maxSdlSlider.setToolTipText("Maximum quantity of pixels playing at the same time.");
        maxSdlSlider.setValue(1);
        maxSdlSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSdlSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout maxSdlPanelLayout = new javax.swing.GroupLayout(maxSdlPanel);
        maxSdlPanel.setLayout(maxSdlPanelLayout);
        maxSdlPanelLayout.setHorizontalGroup(
            maxSdlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxSdlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxSdlSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        maxSdlPanelLayout.setVerticalGroup(
            maxSdlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxSdlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxSdlSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        generalWaveControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Wave Controls"));
        generalWaveControlsPanel.setPreferredSize(new java.awt.Dimension(222, 260));

        bufferSizeLabel.setText("Buffer size:");

        interpolationPointsLabel.setText("Interpolation:");

        keepOrbitLabel.setText("Keep orbit:");

        bufferPollingLabel.setText("Buffer polling:");

        skipDivergentWaveCheckBox.setText("Skip divergent points");
        skipDivergentWaveCheckBox.setToolTipText("If a divergent pixel is detected, skip all its orbits, in order to avoid audio spikes.");

        interpolationPointsSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 1));
        interpolationPointsSpinner.setToolTipText("<html>\nDetermine how many interpolation points will be<br>\ninserted between two consecutive orbit values.<br>\nHigher quantities should lower the pitch, causing a<br>\nsoft triangle wave effect.\n</html>");

        keepOrbitSpinner.setModel(new javax.swing.SpinnerNumberModel(25, 1, 1000, 1));
        keepOrbitSpinner.setToolTipText("<html>\nEvery orbit will be repeated for the selected amount of time.<br>\nEach round interpolation will be applied. Higher quantities should<br>\nlower the pitch generating an effect similar to a square wave.\n</html>");

        bufferSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(18000, 18000, 176400, 4096));
        bufferSizeSpinner.setToolTipText("<html>\nHigher values may help if the system is under heavy load<br>\nbut the response time for a mouse click will be higher.\n</html>");

        bufferPollingSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 400, 1));
        bufferPollingSpinner.setToolTipText("<html>\nHigher values may help reduce overall system load,<br>\nusually with a large buffer size.\n</html>\n");

        javax.swing.GroupLayout generalWaveControlsPanelLayout = new javax.swing.GroupLayout(generalWaveControlsPanel);
        generalWaveControlsPanel.setLayout(generalWaveControlsPanelLayout);
        generalWaveControlsPanelLayout.setHorizontalGroup(
            generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalWaveControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalWaveControlsPanelLayout.createSequentialGroup()
                        .addComponent(interpolationPointsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(interpolationPointsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generalWaveControlsPanelLayout.createSequentialGroup()
                        .addComponent(keepOrbitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(keepOrbitSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generalWaveControlsPanelLayout.createSequentialGroup()
                        .addComponent(skipDivergentWaveCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalWaveControlsPanelLayout.createSequentialGroup()
                        .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bufferSizeLabel)
                            .addComponent(bufferPollingLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bufferPollingSpinner)
                            .addComponent(bufferSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        generalWaveControlsPanelLayout.setVerticalGroup(
            generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalWaveControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interpolationPointsLabel)
                    .addComponent(interpolationPointsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keepOrbitLabel)
                    .addComponent(keepOrbitSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferSizeLabel)
                    .addComponent(bufferSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalWaveControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferPollingLabel)
                    .addComponent(bufferPollingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(skipDivergentWaveCheckBox)
                .addContainerGap())
        );

        volumeWavePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Volume"));
        volumeWavePanel.setPreferredSize(new java.awt.Dimension(222, 83));

        volumeWaveSlider.setMajorTickSpacing(10000);
        volumeWaveSlider.setMaximum(32767);
        volumeWaveSlider.setMinorTickSpacing(1000);
        volumeWaveSlider.setPaintLabels(true);
        volumeWaveSlider.setPaintTicks(true);
        volumeWaveSlider.setToolTipText("<html>\nThe value will be used for newly played pixels.<br>\nOverall laudness will change when older notes are replaced.\n<html>");
        volumeWaveSlider.setValue(16383);
        volumeWaveSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeWaveSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout volumeWavePanelLayout = new javax.swing.GroupLayout(volumeWavePanel);
        volumeWavePanel.setLayout(volumeWavePanelLayout);
        volumeWavePanelLayout.setHorizontalGroup(
            volumeWavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(volumeWavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(volumeWaveSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        volumeWavePanelLayout.setVerticalGroup(
            volumeWavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(volumeWavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(volumeWaveSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        directConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Direct Coordinate Coversion"));
        directConversionPanel.setPreferredSize(new java.awt.Dimension(222, 260));

        directLeftConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Left channel"));
        directLeftConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the X axis</strong><br>\nInput scale: FROM (min X value) TO (max X value)<br>\nOutput scale: FROM ( - Volume) TO ( + Volume)<br>\nOutput value: <strong>Amplitude of the left audio signal</strong><br>\n</html>");

        minZxDirectLabel.setText("Min zx:");

        minZxDirectSpinner.setModel(new javax.swing.SpinnerNumberModel(-1.25d, null, null, 0.01d));

        maxZxDirectLabel.setText("Max zx:");

        maxZxDirectSpinner.setModel(new javax.swing.SpinnerNumberModel(1.25d, null, null, 0.01d));

        javax.swing.GroupLayout directLeftConversionPanelLayout = new javax.swing.GroupLayout(directLeftConversionPanel);
        directLeftConversionPanel.setLayout(directLeftConversionPanelLayout);
        directLeftConversionPanelLayout.setHorizontalGroup(
            directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directLeftConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxZxDirectLabel)
                    .addComponent(minZxDirectLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(minZxDirectSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(maxZxDirectSpinner))
                .addContainerGap())
        );
        directLeftConversionPanelLayout.setVerticalGroup(
            directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directLeftConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minZxDirectLabel)
                    .addComponent(minZxDirectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(directLeftConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxZxDirectLabel)
                    .addComponent(maxZxDirectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        directRightConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Right Channel"));
        directRightConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the Y axis</strong><br>\nInput scale: FROM (min Y value) TO (max Y value)<br>\nOutput scale: FROM ( - Volume) TO ( + Volume)<br>\nOutput value: <strong>Amplitude of the right audio signa</strong>l<br>\n</html>");

        minZyDirectLabel.setText("Min zy:");

        maxZyDirectLabel.setText("Max zy:");

        minZyDirectSpinner.setModel(new javax.swing.SpinnerNumberModel(-1.25d, null, null, 0.01d));

        maxZyDirectSpinner.setModel(new javax.swing.SpinnerNumberModel(1.25d, null, null, 0.01d));

        javax.swing.GroupLayout directRightConversionPanelLayout = new javax.swing.GroupLayout(directRightConversionPanel);
        directRightConversionPanel.setLayout(directRightConversionPanelLayout);
        directRightConversionPanelLayout.setHorizontalGroup(
            directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directRightConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minZyDirectLabel)
                    .addComponent(maxZyDirectLabel))
                .addGap(29, 29, Short.MAX_VALUE)
                .addGroup(directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxZyDirectSpinner)
                    .addComponent(minZyDirectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        directRightConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxZyDirectSpinner, minZyDirectSpinner});

        directRightConversionPanelLayout.setVerticalGroup(
            directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directRightConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minZyDirectLabel)
                    .addComponent(minZyDirectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(directRightConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxZyDirectLabel)
                    .addComponent(maxZyDirectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("scale to (-+) Volume value");

        javax.swing.GroupLayout directConversionPanelLayout = new javax.swing.GroupLayout(directConversionPanel);
        directConversionPanel.setLayout(directConversionPanelLayout);
        directConversionPanelLayout.setHorizontalGroup(
            directConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directLeftConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(directRightConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        directConversionPanelLayout.setVerticalGroup(
            directConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(directLeftConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directRightConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        sineConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sine Coordinate Conversion"));
        sineConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the Y axis</strong><br>\nInput scale: FROM (min Y value) TO (max Y value)<br>\nOutput scale: FROM (min Frequency) TO (max Frequency)<br>\nOutput value: <strong>Frequency (pitch) of a sine wave to play</strong><br>\ne.g: input 2, input scale FROM 0 TO 10, output scale FROM 0 TO 100, output 20<br>\nOrbit values on the X axis are used for panning.\n</html>\n");
        sineConversionPanel.setPreferredSize(new java.awt.Dimension(222, 151));

        minZySineLabel.setText("Min zy:");

        maxZySineLabel.setText("Max zy:");

        minFreqLabel.setText("Min freq:");

        maxFreqLabel.setText("Max freq:");

        minZySineSpinner.setModel(new javax.swing.SpinnerNumberModel(-1.25d, null, null, 1.0d));

        maxZySineSpinner.setModel(new javax.swing.SpinnerNumberModel(1.25d, null, null, 1.0d));

        minFreqSpinner.setModel(new javax.swing.SpinnerNumberModel(25, null, null, 1));

        maxFreqSpinner.setModel(new javax.swing.SpinnerNumberModel(4000, null, null, 1));

        javax.swing.GroupLayout sineConversionPanelLayout = new javax.swing.GroupLayout(sineConversionPanel);
        sineConversionPanel.setLayout(sineConversionPanelLayout);
        sineConversionPanelLayout.setHorizontalGroup(
            sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sineConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minZySineLabel)
                    .addComponent(maxZySineLabel)
                    .addComponent(minFreqLabel)
                    .addComponent(maxFreqLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(minFreqSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(maxZySineSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addComponent(maxFreqSpinner))
                    .addComponent(minZySineSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        sineConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxFreqSpinner, maxZySineSpinner, minFreqSpinner});

        sineConversionPanelLayout.setVerticalGroup(
            sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sineConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minZySineLabel)
                    .addComponent(minZySineSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxZySineLabel)
                    .addComponent(maxZySineSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minFreqLabel)
                    .addComponent(minFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sineConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxFreqLabel)
                    .addComponent(maxFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        durationWavePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Note Duration"));
        durationWavePanel.setPreferredSize(new java.awt.Dimension(222, 83));

        durationWaveSlider.setMajorTickSpacing(2);
        durationWaveSlider.setMaximum(10);
        durationWaveSlider.setMinimum(1);
        durationWaveSlider.setMinorTickSpacing(1);
        durationWaveSlider.setPaintLabels(true);
        durationWaveSlider.setPaintTicks(true);
        durationWaveSlider.setToolTipText("<html>\nA pixel will produce a sound with the selected duration in seconds.<br>\nOrbits will be replayed if needed. This may be desired, or avoided<br>\nby increasing audio interations or iterpolation, keep orbit value.<br>\n</html>");
        durationWaveSlider.setValue(1);
        durationWaveSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durationWaveSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout durationWavePanelLayout = new javax.swing.GroupLayout(durationWavePanel);
        durationWavePanel.setLayout(durationWavePanelLayout);
        durationWavePanelLayout.setHorizontalGroup(
            durationWavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(durationWavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(durationWaveSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        durationWavePanelLayout.setVerticalGroup(
            durationWavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(durationWavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(durationWaveSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tab2GridBagPanelLayout = new javax.swing.GroupLayout(tab2GridBagPanel);
        tab2GridBagPanel.setLayout(tab2GridBagPanelLayout);
        tab2GridBagPanelLayout.setHorizontalGroup(
            tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(volumeWavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(waveSourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sineConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxSdlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(directConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generalWaveControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationWavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab2GridBagPanelLayout.setVerticalGroup(
            tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxSdlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(waveSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationWavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tab2GridBagPanelLayout.createSequentialGroup()
                        .addComponent(volumeWavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sineConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                    .addComponent(generalWaveControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(directConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        tab2MainPanel.add(tab2GridBagPanel, gridBagConstraints);

        tabbedPane.addTab("Wave", tab2MainPanel);

        tab3MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tab3MainPanel.setLayout(new java.awt.GridBagLayout());

        maxSequencersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Maximum Sequencers"));
        maxSequencersPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        maxSequencersSlider.setMajorTickSpacing(10);
        maxSequencersSlider.setMaximum(56);
        maxSequencersSlider.setMinimum(1);
        maxSequencersSlider.setMinorTickSpacing(1);
        maxSequencersSlider.setPaintLabels(true);
        maxSequencersSlider.setPaintTicks(true);
        maxSequencersSlider.setToolTipText("<html>\nSimply speaking, every playing pixel creates its own midi <strong>sequence</strong> (like a midi file),<br>\nusing 15 midi channels for Melody section performing the selected instruments.<br>\nEvery sequence is played by a dedicated <strong>sequencer</strong>.<br>\nAll sequencers are connected to one or more <strong>synthesizers</strong> for audio rendering.<br>\nIf the number of sequencers isn't enough to cover the demand for pixels to be played,<br>\nthe longer running sequencer will take over a new job immediately.\n</html>");
        maxSequencersSlider.setValue(1);
        maxSequencersSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSequencersSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout maxSequencersPanelLayout = new javax.swing.GroupLayout(maxSequencersPanel);
        maxSequencersPanel.setLayout(maxSequencersPanelLayout);
        maxSequencersPanelLayout.setHorizontalGroup(
            maxSequencersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxSequencersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxSequencersSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        maxSequencersPanelLayout.setVerticalGroup(
            maxSequencersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxSequencersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxSequencersSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        noteVelocityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocity"));
        noteVelocityPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        noteVelocitySlider.setMajorTickSpacing(20);
        noteVelocitySlider.setMaximum(127);
        noteVelocitySlider.setMinorTickSpacing(5);
        noteVelocitySlider.setPaintLabels(true);
        noteVelocitySlider.setPaintTicks(true);
        noteVelocitySlider.setToolTipText("<html>\nVelocity is the force with which a note is played: loudness.<br>\nThe new setting will influence only pixels awaiting playback.\n</html>");
        noteVelocitySlider.setValue(64);
        noteVelocitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noteVelocitySliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout noteVelocityPanelLayout = new javax.swing.GroupLayout(noteVelocityPanel);
        noteVelocityPanel.setLayout(noteVelocityPanelLayout);
        noteVelocityPanelLayout.setHorizontalGroup(
            noteVelocityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteVelocityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteVelocitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        noteVelocityPanelLayout.setVerticalGroup(
            noteVelocityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteVelocityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteVelocitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        generalMidiControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Midi Controls"));
        generalMidiControlsPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        skipDivergentMidiCheckBox.setText("Skip divergent points");
        skipDivergentMidiCheckBox.setToolTipText("<html>\nIf a divergent pixel is detected, treat it as non existent,<br>\nlet the associated sequencer play the old sequence<br>\nand do not send any \"reset\" command to any channel.<br>\n<strong>Takes precedence over \"Prevent interruptions\".</strong>\n</html>");

        preventInterruptionsCheckBox.setSelected(true);
        preventInterruptionsCheckBox.setText("Prevent interruptions");
        preventInterruptionsCheckBox.setToolTipText("<html>\nWhen deselected:<br>\nIf the associated sequencer is already playing, stop it.<br>\nIf the pixel is divergent or an orbit value is out of conversion range,<br>\nignore all it's orbits and <strong>send a \"all sounds off\" command for all channels</strong>.<br>\nFor every pixel, if the orbit sequence is played entirely, <strong>send a<br>\n\"all sounds off\" command for all channels</strong>.<br>\n<br>\nWhen selected:<br>\nBest efforts will be made to play every pixel anyway.<br>\nIf an orbit value is out of coversion range replace it with a value of 0.<br>\n<strong>Do not send any kind of \"all sounds off\" command for any channel</strong>.\n</html>");

        panMidiEffectCheckBox.setSelected(true);
        panMidiEffectCheckBox.setText("Panning effect");
        panMidiEffectCheckBox.setToolTipText("<html>\nThe effect value will be used to control panning for every note.<br>\nOtherwise instruments will still play in stereo but front centered.\n</html>");

        instrChangeEffectCheckBox.setSelected(true);
        instrChangeEffectCheckBox.setText("Instrument change effect");
        instrChangeEffectCheckBox.setToolTipText("<html>\nThe effect value will be used to change the playing instrument for every note.<br>\nThis will override the selection made in Instruments tab.\n</html>");

        initInstrumentsCheckBox.setSelected(true);
        initInstrumentsCheckBox.setText("Initialize instruments");
        initInstrumentsCheckBox.setToolTipText("<html>\nA Program Change for the selected instruments will be sent often.<br>\nDeselect when selecting instruments manually on an external device.\n</html>");

        javax.swing.GroupLayout generalMidiControlsPanelLayout = new javax.swing.GroupLayout(generalMidiControlsPanel);
        generalMidiControlsPanel.setLayout(generalMidiControlsPanelLayout);
        generalMidiControlsPanelLayout.setHorizontalGroup(
            generalMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalMidiControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(skipDivergentMidiCheckBox)
                    .addComponent(preventInterruptionsCheckBox)
                    .addComponent(panMidiEffectCheckBox)
                    .addComponent(instrChangeEffectCheckBox)
                    .addComponent(initInstrumentsCheckBox))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        generalMidiControlsPanelLayout.setVerticalGroup(
            generalMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalMidiControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initInstrumentsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skipDivergentMidiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preventInterruptionsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panMidiEffectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instrChangeEffectCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        realConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Real Coordinate Conversion"));
        realConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the X axis</strong><br>\nInput scale: FROM (min X value) TO (max X value)<br>\nOutput scale: FROM (lowest desired value) TO (highest desired value)<br>\nOutput value: <strong>Effect value to be applied</strong><br>\nEffect value can be used for panning and/or<br>\nfor selecting a different instrument.\n</html>");
        realConversionPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        minZxMidiLabel.setText("Min zx:");

        minZxMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(-2.25d, null, null, 0.01d));

        maxZxMidiLabel.setText("Max zx:");

        maxZxMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(0.75d, null, null, 0.01d));

        minMidiEffectLabel.setText("Min effect:");

        minMidiEffectSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));

        maxMidiEffectLabel.setText("Max effect:");

        maxMidiEffectSpinner.setModel(new javax.swing.SpinnerNumberModel(127, 0, 127, 1));

        javax.swing.GroupLayout realConversionPanelLayout = new javax.swing.GroupLayout(realConversionPanel);
        realConversionPanel.setLayout(realConversionPanelLayout);
        realConversionPanelLayout.setHorizontalGroup(
            realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(realConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(realConversionPanelLayout.createSequentialGroup()
                        .addComponent(minZxMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(realConversionPanelLayout.createSequentialGroup()
                        .addComponent(maxZxMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(realConversionPanelLayout.createSequentialGroup()
                        .addComponent(minMidiEffectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minMidiEffectSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(realConversionPanelLayout.createSequentialGroup()
                        .addComponent(maxMidiEffectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(maxMidiEffectSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        realConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxMidiEffectSpinner, maxZxMidiSpinner, minMidiEffectSpinner, minZxMidiSpinner});

        realConversionPanelLayout.setVerticalGroup(
            realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(realConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minZxMidiLabel)
                    .addComponent(minZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxZxMidiLabel)
                    .addComponent(maxZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minMidiEffectLabel)
                    .addComponent(minMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(realConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxMidiEffectLabel)
                    .addComponent(maxMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        realConversionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {maxMidiEffectSpinner, maxZxMidiSpinner, minMidiEffectSpinner, minZxMidiSpinner});

        imaginaryConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imag Coordinate Conversion"));
        imaginaryConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the Y axis</strong><br>\nInput scale: FROM (min Y value) TO (max Y value)<br>\nOutput scale: FROM (lowest desired note) TO (highest desired note)<br>\nOutput value: <strong>Midi note number (pitch) to be played</strong><br>\ne.g: Frequency 440Hz, A4, has a midi note value of 69<br>\n</html>");
        imaginaryConversionPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        minZyMidiLabel.setText("Min zy:");

        maxZyMidiLabel.setText("Max zy:");

        minZyMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(-1.25d, null, null, 0.01d));

        maxZyMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(1.25d, null, null, 1.0d));

        minNoteLabel.setText("Min note:");

        minNoteSpinner.setModel(new javax.swing.SpinnerNumberModel(24, 0, 127, 1));

        maxNoteLabel.setText("Max note:");

        maxNoteSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 127, 1));

        javax.swing.GroupLayout imaginaryConversionPanelLayout = new javax.swing.GroupLayout(imaginaryConversionPanel);
        imaginaryConversionPanel.setLayout(imaginaryConversionPanelLayout);
        imaginaryConversionPanelLayout.setHorizontalGroup(
            imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imaginaryConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(minZyMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(imaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(maxZyMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(imaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(minNoteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(imaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(maxNoteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(maxNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        imaginaryConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {maxNoteSpinner, maxZyMidiSpinner, minNoteSpinner, minZyMidiSpinner});

        imaginaryConversionPanelLayout.setVerticalGroup(
            imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imaginaryConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minZyMidiLabel)
                    .addComponent(minZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxZyMidiLabel)
                    .addComponent(maxZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minNoteLabel)
                    .addComponent(minNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxNoteLabel)
                    .addComponent(maxNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        imaginaryConversionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {maxNoteSpinner, maxZyMidiSpinner, minNoteSpinner, minZyMidiSpinner});

        sequenceSpeedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence Speed"));
        sequenceSpeedPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        sequenceSpeedSlider.setMajorTickSpacing(20);
        sequenceSpeedSlider.setMinimum(1);
        sequenceSpeedSlider.setMinorTickSpacing(10);
        sequenceSpeedSlider.setPaintLabels(true);
        sequenceSpeedSlider.setPaintTicks(true);
        sequenceSpeedSlider.setToolTipText("<html>\nEvery pixel creates a sequence from its orbits. This is the tempo (speed)<br>\nat which the generated sequence will be played.\n</html>");
        sequenceSpeedSlider.setValue(15);
        sequenceSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sequenceSpeedSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout sequenceSpeedPanelLayout = new javax.swing.GroupLayout(sequenceSpeedPanel);
        sequenceSpeedPanel.setLayout(sequenceSpeedPanelLayout);
        sequenceSpeedPanelLayout.setHorizontalGroup(
            sequenceSpeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sequenceSpeedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sequenceSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        sequenceSpeedPanelLayout.setVerticalGroup(
            sequenceSpeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sequenceSpeedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sequenceSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        noteDurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Note Duration"));
        noteDurationPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        noteDurationSlider.setMajorTickSpacing(20);
        noteDurationSlider.setMinorTickSpacing(10);
        noteDurationSlider.setPaintLabels(true);
        noteDurationSlider.setPaintTicks(true);
        noteDurationSlider.setToolTipText("<html>\nThe interval of time between a midi note on and note off event for an orbit value.<br>\nDepends on the sequence speed.\n</html>");
        noteDurationSlider.setValue(100);
        noteDurationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noteDurationSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout noteDurationPanelLayout = new javax.swing.GroupLayout(noteDurationPanel);
        noteDurationPanel.setLayout(noteDurationPanelLayout);
        noteDurationPanelLayout.setHorizontalGroup(
            noteDurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteDurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteDurationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        noteDurationPanelLayout.setVerticalGroup(
            noteDurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteDurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteDurationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reverbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reverb"));
        reverbPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        reverbSlider.setMajorTickSpacing(20);
        reverbSlider.setMaximum(127);
        reverbSlider.setMinorTickSpacing(10);
        reverbSlider.setPaintLabels(true);
        reverbSlider.setPaintTicks(true);
        reverbSlider.setToolTipText("Standard midi reverb (control change 91).");
        reverbSlider.setValue(127);
        reverbSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                reverbSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout reverbPanelLayout = new javax.swing.GroupLayout(reverbPanel);
        reverbPanel.setLayout(reverbPanelLayout);
        reverbPanelLayout.setHorizontalGroup(
            reverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reverbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reverbSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        reverbPanelLayout.setVerticalGroup(
            reverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reverbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reverbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chorusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chorus"));
        chorusPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        chorusSlider.setMajorTickSpacing(20);
        chorusSlider.setMaximum(127);
        chorusSlider.setMinorTickSpacing(10);
        chorusSlider.setPaintLabels(true);
        chorusSlider.setPaintTicks(true);
        chorusSlider.setToolTipText("Standard midi chorus (control change 93).");
        chorusSlider.setValue(127);
        chorusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chorusSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout chorusPanelLayout = new javax.swing.GroupLayout(chorusPanel);
        chorusPanel.setLayout(chorusPanelLayout);
        chorusPanelLayout.setHorizontalGroup(
            chorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chorusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chorusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        chorusPanelLayout.setVerticalGroup(
            chorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chorusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chorusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tab3GridBagPanelLayout = new javax.swing.GroupLayout(tab3GridBagPanel);
        tab3GridBagPanel.setLayout(tab3GridBagPanelLayout);
        tab3GridBagPanelLayout.setHorizontalGroup(
            tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab3GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab3GridBagPanelLayout.createSequentialGroup()
                        .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imaginaryConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noteVelocityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reverbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(realConversionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tab3GridBagPanelLayout.createSequentialGroup()
                        .addComponent(maxSequencersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sequenceSpeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chorusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteDurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generalMidiControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab3GridBagPanelLayout.setVerticalGroup(
            tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab3GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxSequencersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sequenceSpeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteDurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(noteVelocityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reverbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chorusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab3GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imaginaryConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(realConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generalMidiControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        tab3MainPanel.add(tab3GridBagPanel, gridBagConstraints);

        tabbedPane.addTab("Melody", tab3MainPanel);

        tab4MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        instrumentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Instruments"));
        instrumentsPanel.setPreferredSize(new java.awt.Dimension(678, 349));

        instrumentsMelodyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Model will be instantiated in code." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        instrumentsMelodyList.setToolTipText("<html>\nHold <strong>Ctrl Key</strong> to add instruments to the selection.<br>\nHold <strong>Shift Key</strong> to select a region.\n</html>");
        instrumentsMelodyList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        instrumentsMelodyList.setVisibleRowCount(-1);
        instrumentsMelodyList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                instrumentsMelodyListMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                instrumentsMelodyListMouseExited(evt);
            }
        });
        instrumentsMelodyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                instrumentsMelodyListValueChanged(evt);
            }
        });
        instrumentsScrollPane.setViewportView(instrumentsMelodyList);

        javax.swing.GroupLayout instrumentsPanelLayout = new javax.swing.GroupLayout(instrumentsPanel);
        instrumentsPanel.setLayout(instrumentsPanelLayout);
        instrumentsPanelLayout.setHorizontalGroup(
            instrumentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instrumentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrumentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
        );
        instrumentsPanelLayout.setVerticalGroup(
            instrumentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instrumentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrumentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout tab4MainPanelLayout = new javax.swing.GroupLayout(tab4MainPanel);
        tab4MainPanel.setLayout(tab4MainPanelLayout);
        tab4MainPanelLayout.setHorizontalGroup(
            tab4MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab4MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrumentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                .addContainerGap())
        );
        tab4MainPanelLayout.setVerticalGroup(
            tab4MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab4MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrumentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Instruments", tab4MainPanel);

        tab5MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tab5MainPanel.setLayout(new java.awt.GridBagLayout());

        drumsNoteDurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Note Duration"));
        drumsNoteDurationPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsNoteDurationSlider.setMajorTickSpacing(20);
        drumsNoteDurationSlider.setMinorTickSpacing(10);
        drumsNoteDurationSlider.setPaintLabels(true);
        drumsNoteDurationSlider.setPaintTicks(true);
        drumsNoteDurationSlider.setToolTipText("<html>\nThe interval of time between a midi note on and note off event for an orbit value.<br>\nDepends on the sequence speed.\n</html>");
        drumsNoteDurationSlider.setValue(100);
        drumsNoteDurationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsNoteDurationSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsNoteDurationPanelLayout = new javax.swing.GroupLayout(drumsNoteDurationPanel);
        drumsNoteDurationPanel.setLayout(drumsNoteDurationPanelLayout);
        drumsNoteDurationPanelLayout.setHorizontalGroup(
            drumsNoteDurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsNoteDurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsNoteDurationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumsNoteDurationPanelLayout.setVerticalGroup(
            drumsNoteDurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsNoteDurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsNoteDurationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsSequenceSpeedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence Speed"));
        drumsSequenceSpeedPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsSequenceSpeedSlider.setMajorTickSpacing(20);
        drumsSequenceSpeedSlider.setMinimum(1);
        drumsSequenceSpeedSlider.setMinorTickSpacing(10);
        drumsSequenceSpeedSlider.setPaintLabels(true);
        drumsSequenceSpeedSlider.setPaintTicks(true);
        drumsSequenceSpeedSlider.setToolTipText("<html>\nEvery pixel creates a sequence from its orbits. This is the tempo (speed)<br>\nat which the generated sequence will be played.\n</html>");
        drumsSequenceSpeedSlider.setValue(15);
        drumsSequenceSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsSequenceSpeedSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsSequenceSpeedPanelLayout = new javax.swing.GroupLayout(drumsSequenceSpeedPanel);
        drumsSequenceSpeedPanel.setLayout(drumsSequenceSpeedPanelLayout);
        drumsSequenceSpeedPanelLayout.setHorizontalGroup(
            drumsSequenceSpeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsSequenceSpeedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsSequenceSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumsSequenceSpeedPanelLayout.setVerticalGroup(
            drumsSequenceSpeedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsSequenceSpeedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsSequenceSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsMaxSequencersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Maximum Sequencers"));
        drumsMaxSequencersPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsMaxSequencersSlider.setMajorTickSpacing(10);
        drumsMaxSequencersSlider.setMaximum(56);
        drumsMaxSequencersSlider.setMinimum(1);
        drumsMaxSequencersSlider.setMinorTickSpacing(1);
        drumsMaxSequencersSlider.setPaintLabels(true);
        drumsMaxSequencersSlider.setPaintTicks(true);
        drumsMaxSequencersSlider.setToolTipText("<html>\nDrums sequencers use midi channel 10. A drum kit is a collection<br>\nof various drum related samples.<br>\nNote value plays the drum type in a drum kit, not pitch.<br>\nRefer to the Melody section for futher explanation.\n</html>");
        drumsMaxSequencersSlider.setValue(1);
        drumsMaxSequencersSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsMaxSequencersSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsMaxSequencersPanelLayout = new javax.swing.GroupLayout(drumsMaxSequencersPanel);
        drumsMaxSequencersPanel.setLayout(drumsMaxSequencersPanelLayout);
        drumsMaxSequencersPanelLayout.setHorizontalGroup(
            drumsMaxSequencersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsMaxSequencersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsMaxSequencersSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumsMaxSequencersPanelLayout.setVerticalGroup(
            drumsMaxSequencersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsMaxSequencersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsMaxSequencersSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsReverbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reverb"));
        drumsReverbPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsReverbSlider.setMajorTickSpacing(20);
        drumsReverbSlider.setMaximum(127);
        drumsReverbSlider.setMinorTickSpacing(10);
        drumsReverbSlider.setPaintLabels(true);
        drumsReverbSlider.setPaintTicks(true);
        drumsReverbSlider.setToolTipText("Standard midi reverb (control change 91).");
        drumsReverbSlider.setValue(127);
        drumsReverbSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsReverbSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsReverbPanelLayout = new javax.swing.GroupLayout(drumsReverbPanel);
        drumsReverbPanel.setLayout(drumsReverbPanelLayout);
        drumsReverbPanelLayout.setHorizontalGroup(
            drumsReverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsReverbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsReverbSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumsReverbPanelLayout.setVerticalGroup(
            drumsReverbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsReverbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsReverbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsChorusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chorus"));
        drumsChorusPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsChorusSlider.setMajorTickSpacing(20);
        drumsChorusSlider.setMaximum(127);
        drumsChorusSlider.setMinorTickSpacing(10);
        drumsChorusSlider.setPaintLabels(true);
        drumsChorusSlider.setPaintTicks(true);
        drumsChorusSlider.setToolTipText("Standard midi chorus (control change 93).");
        drumsChorusSlider.setValue(127);
        drumsChorusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsChorusSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsChorusPanelLayout = new javax.swing.GroupLayout(drumsChorusPanel);
        drumsChorusPanel.setLayout(drumsChorusPanelLayout);
        drumsChorusPanelLayout.setHorizontalGroup(
            drumsChorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsChorusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsChorusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumsChorusPanelLayout.setVerticalGroup(
            drumsChorusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsChorusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsChorusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsVelocityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocity"));
        drumsVelocityPanel.setPreferredSize(new java.awt.Dimension(222, 83));

        drumsVelocitySlider.setMajorTickSpacing(20);
        drumsVelocitySlider.setMaximum(127);
        drumsVelocitySlider.setMinorTickSpacing(5);
        drumsVelocitySlider.setPaintLabels(true);
        drumsVelocitySlider.setPaintTicks(true);
        drumsVelocitySlider.setToolTipText("<html>\nVelocity is the force with which a note is played: loudness.<br>\nThe new setting will influence only pixels awaiting playback.\n</html>");
        drumsVelocitySlider.setValue(64);
        drumsVelocitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                drumsVelocitySliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drumsVelocityPanelLayout = new javax.swing.GroupLayout(drumsVelocityPanel);
        drumsVelocityPanel.setLayout(drumsVelocityPanelLayout);
        drumsVelocityPanelLayout.setHorizontalGroup(
            drumsVelocityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsVelocityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsVelocitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        drumsVelocityPanelLayout.setVerticalGroup(
            drumsVelocityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsVelocityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsVelocitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drumsImaginaryConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imag Coordinate Conversion"));
        drumsImaginaryConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the Y axis</strong><br>\nInput scale: FROM (min Y value) TO (max Y value)<br>\nOutput scale: FROM (lowest drum type) TO (highest drum type)<br>\nOutput value: <strong>Midi drum type to be played</strong><br>\ne.g: default General Midi range for drums goes from 35 to 81.<br>\n</html>");
        drumsImaginaryConversionPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        drumsMinZyMidiLabel.setText("Min zy:");

        drumsMinZyMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(-1.25d, null, null, 0.01d));

        drumsMaxZyMidiLabel.setText("Max zy:");

        drumsMinNoteLabel.setText("Min note:");

        drumsMaxNoteLabel.setText("Max note:");

        drumsMaxZyMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(1.25d, null, null, 1.0d));

        drumsMinNoteSpinner.setModel(new javax.swing.SpinnerNumberModel(24, 0, 127, 1));

        drumsMaxNoteSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 127, 1));

        javax.swing.GroupLayout drumsImaginaryConversionPanelLayout = new javax.swing.GroupLayout(drumsImaginaryConversionPanel);
        drumsImaginaryConversionPanel.setLayout(drumsImaginaryConversionPanelLayout);
        drumsImaginaryConversionPanelLayout.setHorizontalGroup(
            drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMinZyMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMinZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMaxNoteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(drumsMaxNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMaxZyMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMaxZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMinNoteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMinNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        drumsImaginaryConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {drumsMaxNoteSpinner, drumsMaxZyMidiSpinner, drumsMinNoteSpinner, drumsMinZyMidiSpinner});

        drumsImaginaryConversionPanelLayout.setVerticalGroup(
            drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsImaginaryConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMinZyMidiLabel)
                    .addComponent(drumsMinZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMaxZyMidiLabel)
                    .addComponent(drumsMaxZyMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMinNoteLabel)
                    .addComponent(drumsMinNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsImaginaryConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMaxNoteLabel)
                    .addComponent(drumsMaxNoteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        drumsImaginaryConversionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {drumsMaxNoteSpinner, drumsMaxZyMidiSpinner, drumsMinNoteSpinner, drumsMinZyMidiSpinner});

        drumsRealConversionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Real Coordinate Conversion"));
        drumsRealConversionPanel.setToolTipText("<html>\nInput value: <strong>Orbit value on the X axis</strong><br>\nInput scale: FROM (min X value) TO (max X value)<br>\nOutput scale: FROM (lowest desired value) TO (highest desired value)<br>\nOutput value: <strong>Effect value to be applied</strong><br>\nEffect value can be used for panning and/or<br>\nfor selecting a different drum kit.\n</html>");
        drumsRealConversionPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        drumsMinZxMidiLabel.setText("Min zx:");

        drumsMinZxMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(-2.25d, null, null, 0.01d));

        drumsMaxZxMidiLabel.setText("Max zx:");

        drumsMinMidiEffectLabel.setText("Min effect:");

        drumsMaxMidiEffectLabel.setText("Max effect:");

        drumsMaxZxMidiSpinner.setModel(new javax.swing.SpinnerNumberModel(0.75d, null, null, 0.01d));

        drumsMinMidiEffectSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));

        drumsMaxMidiEffectSpinner.setModel(new javax.swing.SpinnerNumberModel(127, 0, 127, 1));

        javax.swing.GroupLayout drumsRealConversionPanelLayout = new javax.swing.GroupLayout(drumsRealConversionPanel);
        drumsRealConversionPanel.setLayout(drumsRealConversionPanelLayout);
        drumsRealConversionPanelLayout.setHorizontalGroup(
            drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMinZxMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMinZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMaxZxMidiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMaxZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMinMidiEffectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumsMinMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                        .addComponent(drumsMaxMidiEffectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(drumsMaxMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        drumsRealConversionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {drumsMaxMidiEffectSpinner, drumsMaxZxMidiSpinner, drumsMinMidiEffectSpinner, drumsMinZxMidiSpinner});

        drumsRealConversionPanelLayout.setVerticalGroup(
            drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsRealConversionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMinZxMidiLabel)
                    .addComponent(drumsMinZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMaxZxMidiLabel)
                    .addComponent(drumsMaxZxMidiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMinMidiEffectLabel)
                    .addComponent(drumsMinMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(drumsRealConversionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsMaxMidiEffectLabel)
                    .addComponent(drumsMaxMidiEffectSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        drumsRealConversionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {drumsMaxMidiEffectSpinner, drumsMaxZxMidiSpinner, drumsMinMidiEffectSpinner, drumsMinZxMidiSpinner});

        drumsGeneralMidiControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Midi Controls"));
        drumsGeneralMidiControlsPanel.setPreferredSize(new java.awt.Dimension(222, 171));

        drumsSkipDivergentMidiCheckBox.setText("Skip divergent points");
        drumsSkipDivergentMidiCheckBox.setToolTipText("<html>\nIf a divergent pixel is detected, treat it as non existent,<br>\nlet the associated sequencer play the old sequence<br>\nand do not send any \"reset\" command to any channel.<br>\n<strong>Takes precedence over \"Prevent interruptions\".</strong>\n</html>");

        drumsPreventInterruptionsCheckBox.setSelected(true);
        drumsPreventInterruptionsCheckBox.setText("Prevent interruptions");
        drumsPreventInterruptionsCheckBox.setToolTipText("<html>\nWhen deselected:<br>\nIf the associated sequencer is already playing, stop it.<br>\nIf the pixel is divergent or an orbit value is out of conversion range,<br>\nignore all it's orbits and <strong>send a \"all sounds off\" command for all channels</strong>.<br>\nFor every pixel, if the orbit sequence is played entirely, <strong>send a<br>\n\"all sounds off\" command for all channels</strong>.<br>\n<br>\nWhen selected:<br>\nBest efforts will be made to play every pixel anyway.<br>\nIf an orbit value is out of coversion range replace it with a value of 0.<br>\n<strong>Do not send any kind of \"all sounds off\" command for any channel</strong>.\n</html>");

        drumsPanMidiEffectCheckBox.setSelected(true);
        drumsPanMidiEffectCheckBox.setText("Panning effect");
        drumsPanMidiEffectCheckBox.setToolTipText("<html>\nThe effect value will be used to control panning for every drum hit.<br>\nOtherwise drums will still play in stereo but front centered.\n</html>");

        drumsChangeEffectCheckBox.setSelected(true);
        drumsChangeEffectCheckBox.setText("Instrument change effect");
        drumsChangeEffectCheckBox.setToolTipText("<html>\nThe effect value will be used to change the drum kit for every hit.<br>\nThis will override the selection made in Drumkits tab.\n</html>");

        drumsInitInstrumentsCheckBox.setSelected(true);
        drumsInitInstrumentsCheckBox.setText("Initialize instruments");
        drumsInitInstrumentsCheckBox.setToolTipText("<html>\nA Program Change for the selected drum kits will be sent often.<br>\nDeselect when selecting drum kits manually on an external device.\n</html>");

        javax.swing.GroupLayout drumsGeneralMidiControlsPanelLayout = new javax.swing.GroupLayout(drumsGeneralMidiControlsPanel);
        drumsGeneralMidiControlsPanel.setLayout(drumsGeneralMidiControlsPanelLayout);
        drumsGeneralMidiControlsPanelLayout.setHorizontalGroup(
            drumsGeneralMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsGeneralMidiControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drumsGeneralMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drumsSkipDivergentMidiCheckBox)
                    .addComponent(drumsPreventInterruptionsCheckBox)
                    .addComponent(drumsPanMidiEffectCheckBox)
                    .addComponent(drumsChangeEffectCheckBox)
                    .addComponent(drumsInitInstrumentsCheckBox))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        drumsGeneralMidiControlsPanelLayout.setVerticalGroup(
            drumsGeneralMidiControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumsGeneralMidiControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumsInitInstrumentsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drumsSkipDivergentMidiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drumsPreventInterruptionsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drumsPanMidiEffectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drumsChangeEffectCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tab5GridBagPanelLayout = new javax.swing.GroupLayout(tab5GridBagPanel);
        tab5GridBagPanel.setLayout(tab5GridBagPanelLayout);
        tab5GridBagPanelLayout.setHorizontalGroup(
            tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab5GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab5GridBagPanelLayout.createSequentialGroup()
                        .addComponent(drumsMaxSequencersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsSequenceSpeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsNoteDurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab5GridBagPanelLayout.createSequentialGroup()
                        .addComponent(drumsVelocityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsReverbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsChorusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab5GridBagPanelLayout.createSequentialGroup()
                        .addComponent(drumsImaginaryConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsRealConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drumsGeneralMidiControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab5GridBagPanelLayout.setVerticalGroup(
            tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab5GridBagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drumsMaxSequencersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drumsSequenceSpeedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drumsNoteDurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(drumsReverbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drumsVelocityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drumsChorusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab5GridBagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drumsGeneralMidiControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drumsRealConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drumsImaginaryConversionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        tab5MainPanel.add(tab5GridBagPanel, gridBagConstraints);

        tabbedPane.addTab("Drums", tab5MainPanel);

        tab6MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        drumkitsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Drumkits"));
        drumkitsPanel.setPreferredSize(new java.awt.Dimension(678, 349));

        drumkitsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Model will be instantiated in code." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        drumkitsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        drumkitsList.setToolTipText("<html>\nOne default drumkit can be selected.\n</html>");
        drumkitsList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        drumkitsList.setSelectedIndex(1);
        drumkitsList.setVisibleRowCount(-1);
        drumkitsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                drumkitsListMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                drumkitsListMouseExited(evt);
            }
        });
        drumkitsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                drumkitsListValueChanged(evt);
            }
        });
        drumkitsScrollPane.setViewportView(drumkitsList);

        javax.swing.GroupLayout drumkitsPanelLayout = new javax.swing.GroupLayout(drumkitsPanel);
        drumkitsPanel.setLayout(drumkitsPanelLayout);
        drumkitsPanelLayout.setHorizontalGroup(
            drumkitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumkitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumkitsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
        );
        drumkitsPanelLayout.setVerticalGroup(
            drumkitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drumkitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumkitsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout tab6MainPanelLayout = new javax.swing.GroupLayout(tab6MainPanel);
        tab6MainPanel.setLayout(tab6MainPanelLayout);
        tab6MainPanelLayout.setHorizontalGroup(
            tab6MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab6MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumkitsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                .addContainerGap())
        );
        tab6MainPanelLayout.setVerticalGroup(
            tab6MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab6MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumkitsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Drumkits", tab6MainPanel);

        tab7MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        externalDevicesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("External Devices"));
        externalDevicesPanel.setPreferredSize(new java.awt.Dimension(10, 210));

        externalDevicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Vendor", "Version", "Receivers"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        externalDevicesTable.setToolTipText("<html>\nReal external midi hardware or virtual internal midi devices.<br>\nUse LoopBe1 or Virmidi to connect to DAWs, or Virtualmidisynth.\n</html>");
        externalDevicesTable.setFillsViewportHeight(true);
        externalDevicesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        externalDevicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                externalDevicesTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                externalDevicesTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                externalDevicesTableMouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(externalDevicesTable);

        javax.swing.GroupLayout externalDevicesPanelLayout = new javax.swing.GroupLayout(externalDevicesPanel);
        externalDevicesPanel.setLayout(externalDevicesPanelLayout);
        externalDevicesPanelLayout.setHorizontalGroup(
            externalDevicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(externalDevicesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
        );
        externalDevicesPanelLayout.setVerticalGroup(
            externalDevicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(externalDevicesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        toggleDevicesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Toggle"));
        toggleDevicesPanel.setLayout(new java.awt.GridLayout(3, 1, 0, 10));

        gervillToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/gervill.png"))); // NOI18N
        gervillToggleButton.setSelected(true);
        gervillToggleButton.setText("Internal Synthesizer");
        gervillToggleButton.setToolTipText("<html>\nBuilt in synthesizer, quite good, but with polyphony limited to 64 voices.<br>\nAdd good soundfonts for better results.\n</html>");
        gervillToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gervillToggleButtonItemStateChanged(evt);
            }
        });
        toggleDevicesPanel.add(gervillToggleButton);

        jackToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/jack.png"))); // NOI18N
        jackToggleButton.setText("Jack");
        jackToggleButton.setToolTipText("<html>\nJACK Audio Connection Kit is a professional sound server,<br>\nproviding low-latency connections between applications.<br>\nOnly midi is supported. Jack must be installed and running.\n</html>");
        jackToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jackToggleButtonItemStateChanged(evt);
            }
        });
        toggleDevicesPanel.add(jackToggleButton);

        dumpToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/dump.png"))); // NOI18N
        dumpToggleButton.setText("Dump");
        dumpToggleButton.setToolTipText("<html>\nMidi activity will be displayed in the info text area under Fractal tab.\n</html>");
        dumpToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dumpToggleButtonItemStateChanged(evt);
            }
        });
        toggleDevicesPanel.add(dumpToggleButton);

        updateDevicesTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Update Detected Devices"));
        updateDevicesTablePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 55));

        updateDevicesTableButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/update.png"))); // NOI18N
        updateDevicesTableButton.setText("Update");
        updateDevicesTableButton.setToolTipText("<html>\nRefresh the External Devices table, useful when connecting<br>\nnew hardware, virtual or real.\n</html>");
        updateDevicesTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDevicesTableButtonActionPerformed(evt);
            }
        });
        updateDevicesTablePanel.add(updateDevicesTableButton);

        recorderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Midi Recorder"));

        recorderToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/recorderOff.png"))); // NOI18N
        recorderToggleButton.setText("Record");
        recorderToggleButton.setToolTipText("<html>\nWhen the recorder is active, it will record all midi activity, may it be the outline autoplay feature<br>\nor the clicks of individual pixels. When done recording, deselect the recorder to save a midi file.<br>\nIt is preferable to connect to external software directly through a virtual device.<br>\nOnly midi data will be saved.<br>\n</html>");
        recorderToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/devices/recorderOn.png"))); // NOI18N
        recorderToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recorderToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout recorderPanelLayout = new javax.swing.GroupLayout(recorderPanel);
        recorderPanel.setLayout(recorderPanelLayout);
        recorderPanelLayout.setHorizontalGroup(
            recorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recorderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recorderToggleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        recorderPanelLayout.setVerticalGroup(
            recorderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recorderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recorderToggleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tab7MainPanelLayout = new javax.swing.GroupLayout(tab7MainPanel);
        tab7MainPanel.setLayout(tab7MainPanelLayout);
        tab7MainPanelLayout.setHorizontalGroup(
            tab7MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab7MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab7MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(externalDevicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addGroup(tab7MainPanelLayout.createSequentialGroup()
                        .addComponent(toggleDevicesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateDevicesTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recorderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tab7MainPanelLayout.setVerticalGroup(
            tab7MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab7MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(externalDevicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab7MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recorderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toggleDevicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateDevicesTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Devices", tab7MainPanel);

        tab8MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        colorSetupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette"));

        color0Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color0Button.setText("Color 1");
        color0Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color0Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color0ButtonActionPerformed(evt);
            }
        });

        color1Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color1Button.setText("Color 2");
        color1Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color1ButtonActionPerformed(evt);
            }
        });

        color2Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color2Button.setText("Color 3");
        color2Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color2ButtonActionPerformed(evt);
            }
        });

        color3Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color3Button.setText("Color 4");
        color3Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color3ButtonActionPerformed(evt);
            }
        });

        color4Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color4Button.setText("Color 5");
        color4Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color4Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color4ButtonActionPerformed(evt);
            }
        });

        color7Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color7Button.setText("Color 8");
        color7Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color7Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color7ButtonActionPerformed(evt);
            }
        });

        color6Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color6Button.setText("Color 7");
        color6Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color6Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color6ButtonActionPerformed(evt);
            }
        });

        color5Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color5Button.setText("Color 6");
        color5Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color5Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color5ButtonActionPerformed(evt);
            }
        });

        color8Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color8Button.setText("Color 9");
        color8Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color8Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color8ButtonActionPerformed(evt);
            }
        });

        color0Slider.setValue(10);
        color0Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color0Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color0SliderStateChanged(evt);
            }
        });

        color1Slider.setValue(20);
        color1Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color1Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color1SliderStateChanged(evt);
            }
        });

        color2Slider.setValue(30);
        color2Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color2Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color2SliderStateChanged(evt);
            }
        });

        color3Slider.setValue(40);
        color3Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color3Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color3SliderStateChanged(evt);
            }
        });

        color4Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color4Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color4SliderStateChanged(evt);
            }
        });

        color5Slider.setValue(60);
        color5Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color5Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color5SliderStateChanged(evt);
            }
        });

        color6Slider.setValue(70);
        color6Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color6Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color6SliderStateChanged(evt);
            }
        });

        color7Slider.setValue(80);
        color7Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color7Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color7SliderStateChanged(evt);
            }
        });

        color8Slider.setValue(90);
        color8Slider.setPreferredSize(new java.awt.Dimension(200, 14));
        color8Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                color8SliderStateChanged(evt);
            }
        });

        color9Button.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        color9Button.setText("Color 0");
        color9Button.setToolTipText("The first and last color of the palette: the resulting pattern will cycle for higer iterations count.");
        color9Button.setPreferredSize(new java.awt.Dimension(100, 18));
        color9Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color9ButtonActionPerformed(evt);
            }
        });

        palettePresetsLabel.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        palettePresetsLabel.setText("Presets:");

        presetHueButton.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        presetHueButton.setText("Hue");
        presetHueButton.setPreferredSize(new java.awt.Dimension(100, 20));
        presetHueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetHueButtonActionPerformed(evt);
            }
        });

        presetBlankButton.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        presetBlankButton.setText("Blank");
        presetBlankButton.setPreferredSize(new java.awt.Dimension(100, 20));
        presetBlankButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetBlankButtonActionPerformed(evt);
            }
        });

        presetWikiButton.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        presetWikiButton.setText("Wiki");
        presetWikiButton.setPreferredSize(new java.awt.Dimension(100, 20));
        presetWikiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetWikiButtonActionPerformed(evt);
            }
        });

        presetRandomButton.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        presetRandomButton.setText("Rand");
        presetRandomButton.setPreferredSize(new java.awt.Dimension(100, 20));
        presetRandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetRandomButtonActionPerformed(evt);
            }
        });

        paletteDensitySpinner.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        paletteDensitySpinner.setModel(new javax.swing.SpinnerNumberModel(3.0d, 0.1d, 10.0d, 0.1d));
        paletteDensitySpinner.setToolTipText("<html>\nAffects how the orbit iteration count percentage is mapped to the color palette.<br>\nOnly relevant in histogram display mode.\n</html>");
        paletteDensitySpinner.setPreferredSize(new java.awt.Dimension(100, 20));
        paletteDensitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paletteDensitySpinnerStateChanged(evt);
            }
        });

        paletteDensityLabel.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        paletteDensityLabel.setText("Density:");

        javax.swing.GroupLayout colorSetupPanelLayout = new javax.swing.GroupLayout(colorSetupPanel);
        colorSetupPanel.setLayout(colorSetupPanelLayout);
        colorSetupPanelLayout.setHorizontalGroup(
            colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color0Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color0Slider, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color1Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color1Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color2Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color2Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color3Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color3Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color4Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color4Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color5Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorSetupPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(color5Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(colorSetupPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(color6Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color7Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color7Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color8Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color8Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color6Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(colorSetupPanelLayout.createSequentialGroup()
                        .addComponent(color9Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(palettePresetsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(presetHueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(presetBlankButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(presetWikiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(presetRandomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paletteDensityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paletteDensitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        colorSetupPanelLayout.setVerticalGroup(
            colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color0Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color0Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color1Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color2Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color2Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color3Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color3Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color4Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color4Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color5Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color5Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color6Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color6Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color7Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color7Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color8Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color8Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(color9Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(palettePresetsLabel)
                    .addComponent(presetHueButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presetBlankButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presetWikiButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presetRandomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paletteDensitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paletteDensityLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        colorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tab8MainPanelLayout = new javax.swing.GroupLayout(tab8MainPanel);
        tab8MainPanel.setLayout(tab8MainPanelLayout);
        tab8MainPanelLayout.setHorizontalGroup(
            tab8MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab8MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab8MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorSetupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tab8MainPanelLayout.setVerticalGroup(
            tab8MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab8MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorSetupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Palette", tab8MainPanel);

        projectMenu.setText("Project");

        openProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openProjectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/open.png"))); // NOI18N
        openProjectMenuItem.setText("Open...");
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        projectMenu.add(openProjectMenuItem);

        saveProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveProjectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/save.png"))); // NOI18N
        saveProjectMenuItem.setText("Save As...");
        saveProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuItemActionPerformed(evt);
            }
        });
        projectMenu.add(saveProjectMenuItem);
        projectMenu.add(menuProjectSeparator);

        presetsProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        presetsProjectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/preset.png"))); // NOI18N
        presetsProjectMenuItem.setText("Presets...");
        presetsProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetsProjectMenuItemActionPerformed(evt);
            }
        });
        projectMenu.add(presetsProjectMenuItem);

        menuBar.add(projectMenu);

        soundbankMenu.setText("Soundbank");

        loadSoundbankMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadSoundbankMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/load.png"))); // NOI18N
        loadSoundbankMenuItem.setText("Load...");
        loadSoundbankMenuItem.setToolTipText("<html>\nInternal synthesizer supports the standards<br>\nDLS (Downloadable Sounds) Level 2.2 and<br>\nSF2 (SoundFont) 2.04 .\n</html>");
        loadSoundbankMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSoundbankMenuItemActionPerformed(evt);
            }
        });
        soundbankMenu.add(loadSoundbankMenuItem);

        loadDefaultSoundbankMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadDefaultSoundbankMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/default.png"))); // NOI18N
        loadDefaultSoundbankMenuItem.setText("Load Default");
        loadDefaultSoundbankMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDefaultSoundbankMenuItemActionPerformed(evt);
            }
        });
        soundbankMenu.add(loadDefaultSoundbankMenuItem);

        unloadAllInstrumentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        unloadAllInstrumentsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/unload.png"))); // NOI18N
        unloadAllInstrumentsMenuItem.setText("Unload All Instruments");
        unloadAllInstrumentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unloadAllInstrumentsMenuItemActionPerformed(evt);
            }
        });
        soundbankMenu.add(unloadAllInstrumentsMenuItem);

        menuBar.add(soundbankMenu);

        helpMenu.setText("Help");

        websiteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/home.png"))); // NOI18N
        websiteMenuItem.setText("Website...");
        websiteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                websiteMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(websiteMenuItem);

        youtubeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/youtube.png"))); // NOI18N
        youtubeMenuItem.setText("YouTube...");
        youtubeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                youtubeMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(youtubeMenuItem);

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/about.png"))); // NOI18N
        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);
        helpMenu.add(menuHelpSeparator);

        donateMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/betaiotazeta/fractalmusicgenerator/images/menu/donate.png"))); // NOI18N
        donateMenuItem.setText("Donate...");
        donateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donateMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(donateMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fractalsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fractalsComboBoxActionPerformed
        int fractalIndex = fractalsComboBox.getSelectedIndex();
        cfg.setFractalIndex(fractalIndex);
        fractalPanel.redrawImages();
    }//GEN-LAST:event_fractalsComboBoxActionPerformed

    private void maxAudioIterationsSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxAudioIterationsSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("For each click " + value + " audio orbits will be calculated." + nl);
        }
    }//GEN-LAST:event_maxAudioIterationsSliderStateChanged

    private void maxSdlSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSdlSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Maximum poliphony for type wave set to: " + value + nl);
        }
    }//GEN-LAST:event_maxSdlSliderStateChanged

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetSound();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void outlinePlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlinePlayButtonActionPerformed
        if ((fractalPanel.getWidth() == 0) || (fractalPanel.getHeight() == 0)) {
            tab1TextArea.append("Fractal is not visible!" + nl);
            return;
        }
        outlinePlayButton.setEnabled(false);
        fractalPanel.playOutline();
    }//GEN-LAST:event_outlinePlayButtonActionPerformed

    private void outlineSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outlineSpeedSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Outline play speed set to: " + value + nl);
        }
    }//GEN-LAST:event_outlineSpeedSliderStateChanged

    private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed
        persistence.open();
    }//GEN-LAST:event_openProjectMenuItemActionPerformed

    private void saveProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuItemActionPerformed
        persistence.save();
    }//GEN-LAST:event_saveProjectMenuItemActionPerformed

    private void loadSoundbankMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSoundbankMenuItemActionPerformed
        this.getSoundbankManager().loadSoundbank();
    }//GEN-LAST:event_loadSoundbankMenuItemActionPerformed

    private void instrumentsMelodyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_instrumentsMelodyListValueChanged
        soundbankManager.changeInstrumentsMelody();
    }//GEN-LAST:event_instrumentsMelodyListValueChanged

    private void drumkitsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_drumkitsListValueChanged
        soundbankManager.changeDrumkits();
    }//GEN-LAST:event_drumkitsListValueChanged

    private void externalDevicesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_externalDevicesTableMouseClicked
        resetSound();
        deviceManager.changeExternalDevice();
    }//GEN-LAST:event_externalDevicesTableMouseClicked

    private void gervillToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gervillToggleButtonItemStateChanged
        resetSound();
        deviceManager.toggleGervill();
    }//GEN-LAST:event_gervillToggleButtonItemStateChanged

    private void jackToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jackToggleButtonItemStateChanged
        resetSound();
        deviceManager.toggleJack();
    }//GEN-LAST:event_jackToggleButtonItemStateChanged

    private void dumpToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dumpToggleButtonItemStateChanged
        resetSound();
        deviceManager.toggleDump();
    }//GEN-LAST:event_dumpToggleButtonItemStateChanged

    private void updateDevicesTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDevicesTableButtonActionPerformed
        deviceManager.fillExternalDevicesTable();
    }//GEN-LAST:event_updateDevicesTableButtonActionPerformed

    private void lockOutlineToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockOutlineToggleButtonActionPerformed
        if ((fractalPanel.getWidth() == 0) || (fractalPanel.getHeight() == 0)) {
            fractalPanel.clearImagePath();
        }
        fractalPanel.resetPath();
    }//GEN-LAST:event_lockOutlineToggleButtonActionPerformed

    private void drawCoordinatesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCoordinatesCheckBoxActionPerformed
        if (getDrawCoordinatesCheckBox().isSelected()) {
            fractalPanel.drawCoordinates();
            repaint();
        } else {
            fractalPanel.setImageCoordinates(null);
            repaint();
        }
    }//GEN-LAST:event_drawCoordinatesCheckBoxActionPerformed

    private void smoothCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothCheckBoxActionPerformed
        if (histogramCheckBox.isSelected()) {
            histogramCheckBox.setSelected(false);
        }
        fractalPanel.calculateFractal();
    }//GEN-LAST:event_smoothCheckBoxActionPerformed

    private void histogramCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramCheckBoxActionPerformed
        if (smoothCheckBox.isSelected()) {
            smoothCheckBox.setSelected(false);
        }
        fractalPanel.calculateFractal();
    }//GEN-LAST:event_histogramCheckBoxActionPerformed

    private void maxImageIterationsSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxImageIterationsSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            fractalPanel.setMaxImageIterations(value);
            tab1TextArea.append("For each pixel " + value + " image iterations will be calculated." + nl);
            fractalPanel.calculateFractal();
        }
    }//GEN-LAST:event_maxImageIterationsSliderStateChanged

    private void color0ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color0ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color0ButtonActionPerformed

    private void color1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color1ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color1ButtonActionPerformed

    private void color2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color2ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color2ButtonActionPerformed

    private void color3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color3ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color3ButtonActionPerformed

    private void color4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color4ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color4ButtonActionPerformed

    private void color5ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color5ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color5ButtonActionPerformed

    private void color6ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color6ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color6ButtonActionPerformed

    private void color7ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color7ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color7ButtonActionPerformed

    private void color8ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color8ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color8ButtonActionPerformed

    private void color0SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color0SliderStateChanged
        colorPanel.adjustGradient(0, evt);
    }//GEN-LAST:event_color0SliderStateChanged

    private void color1SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color1SliderStateChanged
        colorPanel.adjustGradient(1, evt);
    }//GEN-LAST:event_color1SliderStateChanged

    private void color2SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color2SliderStateChanged
        colorPanel.adjustGradient(2, evt);
    }//GEN-LAST:event_color2SliderStateChanged

    private void color3SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color3SliderStateChanged
        colorPanel.adjustGradient(3, evt);
    }//GEN-LAST:event_color3SliderStateChanged

    private void color4SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color4SliderStateChanged
        colorPanel.adjustGradient(4, evt);
    }//GEN-LAST:event_color4SliderStateChanged

    private void color5SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color5SliderStateChanged
        colorPanel.adjustGradient(5, evt);
    }//GEN-LAST:event_color5SliderStateChanged

    private void color6SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color6SliderStateChanged
        colorPanel.adjustGradient(6, evt);
    }//GEN-LAST:event_color6SliderStateChanged

    private void color7SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color7SliderStateChanged
        colorPanel.adjustGradient(7, evt);
    }//GEN-LAST:event_color7SliderStateChanged

    private void color8SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_color8SliderStateChanged
        colorPanel.adjustGradient(8, evt);
    }//GEN-LAST:event_color8SliderStateChanged

    private void color9ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color9ButtonActionPerformed
        colorPanel.selectColor(evt);
    }//GEN-LAST:event_color9ButtonActionPerformed

    private void presetHueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetHueButtonActionPerformed
        colorPanel.applyPreset(colorPanel.HUEPATTERN);
    }//GEN-LAST:event_presetHueButtonActionPerformed

    private void presetBlankButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetBlankButtonActionPerformed
        colorPanel.applyPreset(colorPanel.BLANKPATTERN);
    }//GEN-LAST:event_presetBlankButtonActionPerformed

    private void presetWikiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetWikiButtonActionPerformed
        colorPanel.applyPreset(colorPanel.WIKIPATTERN);
    }//GEN-LAST:event_presetWikiButtonActionPerformed

    private void presetRandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetRandomButtonActionPerformed
        colorPanel.applyRandomPreset();
    }//GEN-LAST:event_presetRandomButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutDialog dialog = new AboutDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void websiteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_websiteMenuItemActionPerformed
        try {
            String websiteUrl = "https://betazeta.itch.io/fractal-music-generator";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(websiteUrl));
        } catch (Exception ex) {
            String message = ex.getMessage();
            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
            message = "Please, view site: https://betazeta.itch.io/fractal-music-generator";
            JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_websiteMenuItemActionPerformed

    private void loadDefaultSoundbankMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDefaultSoundbankMenuItemActionPerformed
        soundbankManager.loadDefaultSoundbank();
    }//GEN-LAST:event_loadDefaultSoundbankMenuItemActionPerformed

    private void unloadAllInstrumentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unloadAllInstrumentsMenuItemActionPerformed
        soundbankManager.unloadAllInstruments();
    }//GEN-LAST:event_unloadAllInstrumentsMenuItemActionPerformed

    private void outlineSpeedRandomnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outlineSpeedRandomnessSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Outline play speed randomness set to: " + value + nl);
        }
    }//GEN-LAST:event_outlineSpeedRandomnessSliderStateChanged

    private void outlineSkipSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outlineSkipSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Outline pixel skipping set to: " + value + nl);
        }
    }//GEN-LAST:event_outlineSkipSliderStateChanged

    private void volumeWaveSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeWaveSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Wave audio volume set to: " + value + nl);
        }
    }//GEN-LAST:event_volumeWaveSliderStateChanged

    private void durationWaveSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationWaveSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Wave audio note duration set to: " + value + nl);
        }
    }//GEN-LAST:event_durationWaveSliderStateChanged

    private void maxSequencersSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSequencersSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Maximum sequencers for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_maxSequencersSliderStateChanged

    private void sequenceSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sequenceSpeedSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Sequence speed for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_sequenceSpeedSliderStateChanged

    private void noteDurationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noteDurationSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Note duration for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_noteDurationSliderStateChanged

    private void noteVelocitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noteVelocitySliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Note velocity for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_noteVelocitySliderStateChanged

    private void reverbSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_reverbSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Reverb for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_reverbSliderStateChanged

    private void chorusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chorusSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Chorus for type melody set to: " + value + nl);
        }
    }//GEN-LAST:event_chorusSliderStateChanged

    private void drumsMaxSequencersSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsMaxSequencersSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Maximum sequencers for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsMaxSequencersSliderStateChanged

    private void drumsSequenceSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsSequenceSpeedSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Sequence speed for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsSequenceSpeedSliderStateChanged

    private void drumsNoteDurationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsNoteDurationSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Note duration for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsNoteDurationSliderStateChanged

    private void drumsVelocitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsVelocitySliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Note velocity for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsVelocitySliderStateChanged

    private void drumsReverbSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsReverbSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Reverb for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsReverbSliderStateChanged

    private void drumsChorusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_drumsChorusSliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        if (!jSlider.getValueIsAdjusting()) {
            int value = jSlider.getValue();
            tab1TextArea.append("Chorus for type drums set to: " + value + nl);
        }
    }//GEN-LAST:event_drumsChorusSliderStateChanged

    private void paletteDensitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_paletteDensitySpinnerStateChanged
        JSpinner JSpinner = (JSpinner) evt.getSource();
        double value = (double) JSpinner.getValue();
        tab1TextArea.append("Color density for histogram set to: " + value + nl);
        fractalPanel.calculateFractal();
    }//GEN-LAST:event_paletteDensitySpinnerStateChanged

    private void presetsProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetsProjectMenuItemActionPerformed
        PresetsDialog dialog = new PresetsDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_presetsProjectMenuItemActionPerformed

    private void donateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donateMenuItemActionPerformed
        DonateDialog dialog = new DonateDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_donateMenuItemActionPerformed

    private void directRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directRadioButtonActionPerformed
        minZxDirectSpinner.setEnabled(true);
        maxZxDirectSpinner.setEnabled(true);
        minZyDirectSpinner.setEnabled(true);
        maxZyDirectSpinner.setEnabled(true);
        minZySineSpinner.setEnabled(false);
        maxZySineSpinner.setEnabled(false);
        minFreqSpinner.setEnabled(false);
        maxFreqSpinner.setEnabled(false);
    }//GEN-LAST:event_directRadioButtonActionPerformed

    private void sineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sineRadioButtonActionPerformed
        minZySineSpinner.setEnabled(true);
        maxZySineSpinner.setEnabled(true);
        minFreqSpinner.setEnabled(true);
        maxFreqSpinner.setEnabled(true);
        minZxDirectSpinner.setEnabled(false);
        maxZxDirectSpinner.setEnabled(false);
        minZyDirectSpinner.setEnabled(false);
        maxZyDirectSpinner.setEnabled(false);
    }//GEN-LAST:event_sineRadioButtonActionPerformed

    private void instrumentsMelodyListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentsMelodyListMouseEntered
        ToolTipManager.sharedInstance().setDismissDelay(2000);
    }//GEN-LAST:event_instrumentsMelodyListMouseEntered

    private void instrumentsMelodyListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentsMelodyListMouseExited
        ToolTipManager.sharedInstance().setDismissDelay(toolTipDismissDelay);
    }//GEN-LAST:event_instrumentsMelodyListMouseExited

    private void drumkitsListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drumkitsListMouseEntered
        ToolTipManager.sharedInstance().setDismissDelay(2000);
    }//GEN-LAST:event_drumkitsListMouseEntered

    private void drumkitsListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drumkitsListMouseExited
        ToolTipManager.sharedInstance().setDismissDelay(toolTipDismissDelay);
    }//GEN-LAST:event_drumkitsListMouseExited

    private void externalDevicesTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_externalDevicesTableMouseEntered
        ToolTipManager.sharedInstance().setDismissDelay(4000);
    }//GEN-LAST:event_externalDevicesTableMouseEntered

    private void externalDevicesTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_externalDevicesTableMouseExited
        ToolTipManager.sharedInstance().setDismissDelay(toolTipDismissDelay);
    }//GEN-LAST:event_externalDevicesTableMouseExited

    private void recorderToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recorderToggleButtonActionPerformed
        resetSound();
        deviceManager.toggleRecorder();
    }//GEN-LAST:event_recorderToggleButtonActionPerformed

    private void autoImageIterationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoImageIterationsCheckBoxActionPerformed
        fractalPanel.adjustImageIterations();
    }//GEN-LAST:event_autoImageIterationsCheckBoxActionPerformed

    private void youtubeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_youtubeMenuItemActionPerformed
        try {
            String websiteUrl = "https://www.youtube.com/channel/UCf3xDX7GW59WR2OQN9bPQUA";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(websiteUrl));
        } catch (Exception ex) {
            String message = ex.getMessage();
            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
            message = "Please, view YouTube channel: https://www.youtube.com/channel/UCf3xDX7GW59WR2OQN9bPQUA";
            JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_youtubeMenuItemActionPerformed

    public void resetSound() {
        String message = "Starting reset..." + nl;
        tab1TextArea.append(message);
        audioExecutorService.shutdownNow();

        int timeOut = 0;
        while (!audioExecutorService.isTerminated()) {
            try {
                Thread.sleep(100);
                timeOut = timeOut + 100;
            } catch (InterruptedException ex) {
                return;
            }
            if (timeOut == 5000) {
                message = "Thread pool has not yet been properly shut down!";
                JOptionPane.showMessageDialog(this, message, "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        message = "ThreadPool shut down successfully" + nl;
        tab1TextArea.append(message);

        ArrayList<SourceDataLine> sdlArrayList = soundGenerator.getSdlArrayList();
        int sdlArrayListLength = sdlArrayList.size();
        int sdlClosedCount = 0;
        for (SourceDataLine sdl : sdlArrayList) {
            if (sdl.isOpen()) {
                sdl.stop();
                sdl.flush();
                sdl.close();
                sdlClosedCount++;
            }
        }
        sdlArrayList.clear();
        message = "closed " + sdlClosedCount + " wave lines of " + sdlArrayListLength + nl;
        tab1TextArea.append(message);

        ArrayList<Sequencer> melodySequencersArrayList = soundGenerator.getMelodySequencersArrayList();
        int melodySeqArrayListLength = melodySequencersArrayList.size();
        int melodySeqClosedCount = 0;
        for (Sequencer sequencer : melodySequencersArrayList) {
            if (sequencer.isOpen()) {
                sequencer.stop();
                sequencer.close();
                melodySeqClosedCount++;
            }
        }
        melodySequencersArrayList.clear();
        message = "closed " + melodySeqClosedCount + " melody sequencers of " + melodySeqArrayListLength + nl;
        tab1TextArea.append(message);

        ArrayList<Sequencer> drumsSequencersArrayList = soundGenerator.getDrumsSequencersArrayList();
        int drumsSeqArrayListLength = drumsSequencersArrayList.size();
        int drumsSeqClosedCount = 0;
        for (Sequencer sequencer : drumsSequencersArrayList) {
            if (sequencer.isOpen()) {
                sequencer.stop();
                sequencer.close();
                drumsSeqClosedCount++;
            }
        }
        drumsSequencersArrayList.clear();
        message = "closed " + drumsSeqClosedCount + " drums sequencers of " + drumsSeqArrayListLength + nl;
        tab1TextArea.append(message);

        audioExecutorService = Executors.newCachedThreadPool();
        soundGenerator.resetSoundGenerator();
        fractalPanel.resetImages();
        message = "Reset done!" + nl;
        tab1TextArea.append(message);
        outlinePlayButton.setEnabled(true);
    }

    public void setupIcons() {
        String partialPath = "/org/betaiotazeta/fractalmusicgenerator/images/frame/";
        String[] pathsArray = new String[5];
        pathsArray[0] = partialPath + "frameIcon_16x16.png";
        pathsArray[1] = partialPath + "frameIcon_32x32.png";
        pathsArray[2] = partialPath + "frameIcon_64x64.png";
        pathsArray[3] = partialPath + "frameIcon_128x128.png";
        pathsArray[4] = partialPath + "frameIcon_256x256.png";
        ArrayList<Image> imageList = new ArrayList<>();
        for (String path : pathsArray) {
            InputStream inputStream = getClass().getResourceAsStream(path);
            Image image;        
            try {
                image = ImageIO.read(inputStream);
            } catch (IOException ex) {
                tab1TextArea.append(ex.getMessage());
                return;
            }
            imageList.add(image);
        }
        setIconImages(imageList);
    }
    
    public void setupGui() {
        if (directRadioButton.isSelected()) {
            directRadioButtonActionPerformed(null);
        }
        if (sineRadioButton.isSelected()) {
            sineRadioButtonActionPerformed(null);
        }
        drawCoordinatesCheckBoxActionPerformed(null);
    }
    
    public void updateInfoLabels() {
        timer = new Timer(100, new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               
                // write: is sdl.write() discharging?
                if (soundGenerator.getOverloadedSDL().get()) {
                    writeInfoLabel.setForeground(Color.RED);
                    writeInfoLabel.setText("Wave audio: under load");
                    soundGenerator.getOverloadedSDL().set(false);
                } else {
                    writeInfoLabel.setForeground(Color.GREEN);
                    writeInfoLabel.setText("Wave audio: ok");
                }

                // fractal rendering status
                int threadFractalCount = ((ThreadPoolExecutor) fractalExecutorService).getActiveCount();
                if (threadFractalCount > 0) {
                    renderingInfoLabel.setForeground(Color.RED);
                    renderingInfoLabel.setText("Fractal rendering: in progress");
                } else {
                renderingInfoLabel.setForeground(Color.GREEN);
                renderingInfoLabel.setText("Fractal rendering: done");
                }
                
                // thread count
                int threadCount = ((ThreadPoolExecutor) audioExecutorService).getActiveCount();
                threadsInfoLabel.setText("Custom audio threads: " + threadCount);

                // voices
                int voiceCount = 0;
                VoiceStatus[] vsa = deviceManager.getSynthesizer().getVoiceStatus();
                for (VoiceStatus voice : vsa) {
                    if (voice.active) {
                        voiceCount++;
                    }
                }
                voicesInfoLabel.setText("Internal Midi voices active: " + voiceCount);
            }
        });
        timer.start();
    }

    public void updateConfiguratorFromGui() {
        cfg.setExtendedState(this.getExtendedState());
        cfg.setFrameWidth(this.getWidth());
        cfg.setFrameHeight(this.getHeight());
        cfg.setControlsDividerLocation(tab1ControlsSplitPane.getDividerLocation());
        cfg.setFractalDividerLocation(tab1FractalSplitPane.getDividerLocation());
        cfg.setZoom(fractalPanel.getZoom());
        cfg.setMinA(fractalPanel.getMinA());
        cfg.setMaxB(fractalPanel.getMaxB());
        cfg.setFractalIndex(fractalsComboBox.getSelectedIndex());
        cfg.setMaxAudioIterationsSlider(maxAudioIterationsSlider.getValue());
        cfg.setMaxSdlSlider(maxSdlSlider.getValue());
        cfg.setDirectRadioButton(directRadioButton.isSelected());
        cfg.setSineRadioButton(sineRadioButton.isSelected());
        cfg.setWaveToggleButton(waveToggleButton.isSelected());
        cfg.setMelodyToggleButton(melodyToggleButton.isSelected());
        cfg.setDrumsToggleButton(drumsToggleButton.isSelected());
        cfg.setDrawOrbitsCheckBox(drawOrbitsCheckBox.isSelected());
        cfg.setOutlineSpeedSlider(outlineSpeedSlider.getValue());
        cfg.setDurationWaveSlider(durationWaveSlider.getValue());
        cfg.setInterpolationPointsSpinner((int) interpolationPointsSpinner.getValue());
        cfg.setKeepOrbitSpinner((int) keepOrbitSpinner.getValue());
        cfg.setBufferSizeSpinner((int) bufferSizeSpinner.getValue());
        cfg.setBufferPollingSpinner((int) bufferPollingSpinner.getValue());
        cfg.setVolumeWaveSlider(volumeWaveSlider.getValue());
        cfg.setMinZxDirectSpinner((double) minZxDirectSpinner.getValue());
        cfg.setMaxZxDirectSpinner((double) maxZxDirectSpinner.getValue());
        cfg.setMinZyDirectSpinner((double) minZyDirectSpinner.getValue());
        cfg.setMaxZyDirectSpinner((double) maxZyDirectSpinner.getValue());
        cfg.setMinZySineSpinner((double) minZySineSpinner.getValue());
        cfg.setMaxZySineSpinner((double) maxZySineSpinner.getValue());
        cfg.setMinFreqSpinner((int) minFreqSpinner.getValue());
        cfg.setMaxFreqSpinner((int) maxFreqSpinner.getValue());
        cfg.setMaxSequencersSlider(maxSequencersSlider.getValue());
        cfg.setNoteVelocitySlider(noteVelocitySlider.getValue());
        cfg.setSequenceSpeedSlider(sequenceSpeedSlider.getValue());
        cfg.setNoteDurationSlider(noteDurationSlider.getValue());
        cfg.setPreventInterruptionsCheckBox(preventInterruptionsCheckBox.isSelected());
        cfg.setSkipDivergentMidiCheckBox(skipDivergentMidiCheckBox.isSelected());
        cfg.setInstrChangeEffectCheckBox(instrChangeEffectCheckBox.isSelected());
        cfg.setPanMidiEffectCheckBox(panMidiEffectCheckBox.isSelected());
        cfg.setMinZxMidiSpinner((double) minZxMidiSpinner.getValue());
        cfg.setMaxZxMidiSpinner((double) maxZxMidiSpinner.getValue());
        cfg.setMinMidiEffectSpinner((int) minMidiEffectSpinner.getValue());
        cfg.setMaxMidiEffectSpinner((int) maxMidiEffectSpinner.getValue());
        cfg.setMinZyMidiSpinner((double) minZyMidiSpinner.getValue());
        cfg.setMaxZyMidiSpinner((double) maxZyMidiSpinner.getValue());
        cfg.setMinNoteSpinner((int) minNoteSpinner.getValue());
        cfg.setMaxNoteSpinner((int) maxNoteSpinner.getValue());
        cfg.setVerboseCheckBox(verboseCheckBox.isSelected());
        cfg.setSkipDivergentWaveCheckBox(skipDivergentWaveCheckBox.isSelected());
        cfg.setDrumsChangeEffectCheckBox(drumsChangeEffectCheckBox.isSelected());
        cfg.setDrumsNoteDurationSlider(drumsNoteDurationSlider.getValue());
        cfg.setDrumsMaxMidiEffectSpinner((int) drumsMaxMidiEffectSpinner.getValue());
        cfg.setDrumsMaxNoteSpinner((int) drumsMaxNoteSpinner.getValue());
        cfg.setDrumsMaxSequencersSlider(drumsMaxSequencersSlider.getValue());
        cfg.setDrumsMaxZxMidiSpinner((double) drumsMaxZxMidiSpinner.getValue());
        cfg.setDrumsMaxZyMidiSpinner((double) drumsMaxZyMidiSpinner.getValue());
        cfg.setDrumsMinMidiEffectSpinner((int) drumsMinMidiEffectSpinner.getValue());
        cfg.setDrumsMinNoteSpinner((int) drumsMinNoteSpinner.getValue());
        cfg.setDrumsMinZxMidiSpinner((double) drumsMinZxMidiSpinner.getValue());
        cfg.setDrumsMinZyMidiSpinner((double) drumsMinZyMidiSpinner.getValue());
        cfg.setDrumsPanMidiEffectCheckBox(drumsPanMidiEffectCheckBox.isSelected());
        cfg.setDrumsPreventInterruptionsCheckBox(drumsPreventInterruptionsCheckBox.isSelected());
        cfg.setDrumsSequenceSpeedSlider(drumsSequenceSpeedSlider.getValue());
        cfg.setDrumsSkipDivergentMidiCheckBox(drumsSkipDivergentMidiCheckBox.isSelected());
        cfg.setDrumsVelocitySlider(drumsVelocitySlider.getValue());
        cfg.setOutlineSpeedRandomnessSlider(outlineSpeedRandomnessSlider.getValue());
        cfg.setDrawCoordinatesCheckBox(drawCoordinatesCheckBox.isSelected());
        cfg.setInstrumentsMelodyList(instrumentsMelodyList.getSelectedValuesList());
        cfg.setDrumkitsList(drumkitsList.getSelectedValuesList());
        // devicesTable will be saved when table is clicked or refreshed
        cfg.setDumpToggleButton(dumpToggleButton.isSelected());
        cfg.setGervillToggleButton(gervillToggleButton.isSelected());
        cfg.setJackToggleButton(jackToggleButton.isSelected());
        cfg.setLockOutlineToggleButton(lockOutlineToggleButton.isSelected());
        cfg.setInitInstrumentsCheckBox(initInstrumentsCheckBox.isSelected());
        cfg.setDrumsInitInstrumentsCheckBox(drumsInitInstrumentsCheckBox.isSelected());
        cfg.setHistogramCheckBox(histogramCheckBox.isSelected());
        cfg.setSmoothCheckBox(smoothCheckBox.isSelected());
        cfg.setMaxImageIterationsSlider(maxImageIterationsSlider.getValue());
        cfg.setAutoImageIterationsCheckBox(autoImageIterationsCheckBox.isSelected());
        cfg.setColor0Button(color0Button.getBackground().getRGB());
        cfg.setColor1Button(color1Button.getBackground().getRGB());
        cfg.setColor2Button(color2Button.getBackground().getRGB());
        cfg.setColor3Button(color3Button.getBackground().getRGB());
        cfg.setColor4Button(color4Button.getBackground().getRGB());
        cfg.setColor5Button(color5Button.getBackground().getRGB());
        cfg.setColor6Button(color6Button.getBackground().getRGB());
        cfg.setColor7Button(color7Button.getBackground().getRGB());
        cfg.setColor8Button(color8Button.getBackground().getRGB());
        cfg.setColor9Button(color9Button.getBackground().getRGB());
        cfg.setColor0Slider(color0Slider.getValue());
        cfg.setColor1Slider(color1Slider.getValue());
        cfg.setColor2Slider(color2Slider.getValue());
        cfg.setColor3Slider(color3Slider.getValue());
        cfg.setColor4Slider(color4Slider.getValue());
        cfg.setColor5Slider(color5Slider.getValue());
        cfg.setColor6Slider(color6Slider.getValue());
        cfg.setColor7Slider(color7Slider.getValue());
        cfg.setColor8Slider(color8Slider.getValue());
        cfg.setReverbSlider(reverbSlider.getValue());
        cfg.setChorusSlider(chorusSlider.getValue());
        cfg.setDrumsReverbSlider(drumsReverbSlider.getValue());
        cfg.setDrumsChorusSlider(drumsChorusSlider.getValue());
        cfg.setOutlineSkipSlider(outlineSkipSlider.getValue());
        cfg.setLoopingCheckBox(loopingCheckBox.isSelected());
        cfg.setPaletteDensitySpinner((double) paletteDensitySpinner.getValue());
    }

    public void updateGuiFromConfigurator() {
        this.setExtendedState(cfg.getExtendedState());
        this.setSize(cfg.getFrameWidth(), cfg.getFrameHeight());
        this.validate(); // needed to set the following divider locations correctly
        tab1ControlsSplitPane.setDividerLocation(cfg.getControlsDividerLocation());
        tab1FractalSplitPane.setDividerLocation(cfg.getFractalDividerLocation());
        fractalPanel.setZoom(cfg.getZoom());
        fractalPanel.setMinA(cfg.getMinA());
        fractalPanel.setMaxB(cfg.getMaxB());
        fractalsComboBox.setSelectedIndex(cfg.getFractalIndex());
        maxAudioIterationsSlider.setValue(cfg.getMaxAudioIterationsSlider());
        maxSdlSlider.setValue(cfg.getMaxSdlSlider());
        directRadioButton.setSelected(cfg.isDirectRadioButton());
        sineRadioButton.setSelected(cfg.isSineRadioButton());
        waveToggleButton.setSelected(cfg.isWaveToggleButton());
        melodyToggleButton.setSelected(cfg.isMelodyToggleButton());
        drumsToggleButton.setSelected(cfg.isDrumsToggleButton());
        drawOrbitsCheckBox.setSelected(cfg.isDrawOrbitsCheckBox());
        outlineSpeedSlider.setValue(cfg.getOutlineSpeedSlider());
        durationWaveSlider.setValue(cfg.getDurationWaveSlider());
        interpolationPointsSpinner.setValue(cfg.getInterpolationPointsSpinner());
        keepOrbitSpinner.setValue(cfg.getKeepOrbitSpinner());
        bufferSizeSpinner.setValue(cfg.getBufferSizeSpinner());
        bufferPollingSpinner.setValue(cfg.getBufferPollingSpinner());
        volumeWaveSlider.setValue(cfg.getVolumeWaveSlider());
        minZxDirectSpinner.setValue(cfg.getMinZxDirectSpinner());
        maxZxDirectSpinner.setValue(cfg.getMaxZxDirectSpinner());
        minZyDirectSpinner.setValue(cfg.getMinZyDirectSpinner());
        maxZyDirectSpinner.setValue(cfg.getMaxZyDirectSpinner());
        minZySineSpinner.setValue(cfg.getMinZySineSpinner());
        maxZySineSpinner.setValue(cfg.getMaxZySineSpinner());
        minFreqSpinner.setValue(cfg.getMinFreqSpinner());
        maxFreqSpinner.setValue(cfg.getMaxFreqSpinner());
        maxSequencersSlider.setValue(cfg.getMaxSequencersSlider());
        noteVelocitySlider.setValue(cfg.getNoteVelocitySlider());
        sequenceSpeedSlider.setValue(cfg.getSequenceSpeedSlider());
        noteDurationSlider.setValue(cfg.getNoteDurationSlider());
        preventInterruptionsCheckBox.setSelected(cfg.isPreventInterruptionsCheckBox());
        skipDivergentMidiCheckBox.setSelected(cfg.isSkipDivergentMidiCheckBox());
        instrChangeEffectCheckBox.setSelected(cfg.isInstrChangeEffectCheckBox());
        panMidiEffectCheckBox.setSelected(cfg.isPanMidiEffectCheckBox());
        minZxMidiSpinner.setValue(cfg.getMinZxMidiSpinner());
        maxZxMidiSpinner.setValue(cfg.getMaxZxMidiSpinner());
        minMidiEffectSpinner.setValue(cfg.getMinMidiEffectSpinner());
        maxMidiEffectSpinner.setValue(cfg.getMaxMidiEffectSpinner());
        minZyMidiSpinner.setValue(cfg.getMinZyMidiSpinner());
        maxZyMidiSpinner.setValue(cfg.getMaxZyMidiSpinner());
        minNoteSpinner.setValue(cfg.getMinNoteSpinner());
        maxNoteSpinner.setValue(cfg.getMaxNoteSpinner());
        verboseCheckBox.setSelected(cfg.isVerboseCheckBox());
        skipDivergentWaveCheckBox.setSelected(cfg.isSkipDivergentWaveCheckBox());
        drumsChangeEffectCheckBox.setSelected(cfg.isDrumsChangeEffectCheckBox());
        drumsNoteDurationSlider.setValue(cfg.getDrumsNoteDurationSlider());
        drumsMaxMidiEffectSpinner.setValue(cfg.getDrumsMaxMidiEffectSpinner());
        drumsMaxNoteSpinner.setValue(cfg.getDrumsMaxNoteSpinner());
        drumsMaxSequencersSlider.setValue(cfg.getDrumsMaxSequencersSlider());
        drumsMaxZxMidiSpinner.setValue(cfg.getDrumsMaxZxMidiSpinner());
        drumsMaxZyMidiSpinner.setValue(cfg.getDrumsMaxZyMidiSpinner());
        drumsMinMidiEffectSpinner.setValue(cfg.getDrumsMinMidiEffectSpinner());
        drumsMinNoteSpinner.setValue(cfg.getDrumsMinNoteSpinner());
        drumsMinZxMidiSpinner.setValue(cfg.getDrumsMinZxMidiSpinner());
        drumsMinZyMidiSpinner.setValue(cfg.getDrumsMinZyMidiSpinner());
        drumsPanMidiEffectCheckBox.setSelected(cfg.isDrumsPanMidiEffectCheckBox());
        drumsPreventInterruptionsCheckBox.setSelected(cfg.isDrumsPreventInterruptionsCheckBox());
        drumsSequenceSpeedSlider.setValue(cfg.getDrumsSequenceSpeedSlider());
        drumsSkipDivergentMidiCheckBox.setSelected(cfg.isDrumsSkipDivergentMidiCheckBox());
        drumsVelocitySlider.setValue(cfg.getDrumsVelocitySlider());
        outlineSpeedRandomnessSlider.setValue(cfg.getOutlineSpeedRandomnessSlider());
        drawCoordinatesCheckBox.setSelected(cfg.isDrawCoordinatesCheckBox());
        soundbankManager.selectInstruments(instrumentsMelodyList, cfg.getInstrumentsMelodyList());
        soundbankManager.selectInstruments(drumkitsList, cfg.getInstrumentsMelodyList());
        deviceManager.selectExternalDevice(cfg.getExternalDeviceName());
        dumpToggleButton.setSelected(cfg.isDumpToggleButton());
        gervillToggleButton.setSelected(cfg.isGervillToggleButton());
        jackToggleButton.setSelected(cfg.isJackToggleButton());
        lockOutlineToggleButton.setSelected(cfg.isLockOutlineToggleButton());
        initInstrumentsCheckBox.setSelected(cfg.isInitInstrumentsCheckBox());
        drumsInitInstrumentsCheckBox.setSelected(cfg.isDrumsInitInstrumentsCheckBox());
        histogramCheckBox.setSelected(cfg.isHistogramCheckBox());
        smoothCheckBox.setSelected(cfg.isSmoothCheckBox());
        maxImageIterationsSlider.setValue(cfg.getMaxImageIterationsSlider());
        autoImageIterationsCheckBox.setSelected(cfg.isAutoImageIterationsCheckBox());
        color0Button.setBackground(new Color(cfg.getColor0Button()));
        color1Button.setBackground(new Color(cfg.getColor1Button()));
        color2Button.setBackground(new Color(cfg.getColor2Button()));
        color3Button.setBackground(new Color(cfg.getColor3Button()));
        color4Button.setBackground(new Color(cfg.getColor4Button()));
        color5Button.setBackground(new Color(cfg.getColor5Button()));
        color6Button.setBackground(new Color(cfg.getColor6Button()));
        color7Button.setBackground(new Color(cfg.getColor7Button()));
        color8Button.setBackground(new Color(cfg.getColor8Button()));
        color9Button.setBackground(new Color(cfg.getColor9Button()));
        color0Slider.setValue(cfg.getColor0Slider());
        color1Slider.setValue(cfg.getColor1Slider());
        color2Slider.setValue(cfg.getColor2Slider());
        color3Slider.setValue(cfg.getColor3Slider());
        color4Slider.setValue(cfg.getColor4Slider());
        color5Slider.setValue(cfg.getColor5Slider());
        color6Slider.setValue(cfg.getColor6Slider());
        color7Slider.setValue(cfg.getColor7Slider());
        color8Slider.setValue(cfg.getColor8Slider());
        reverbSlider.setValue(cfg.getReverbSlider());
        chorusSlider.setValue(cfg.getChorusSlider());
        drumsReverbSlider.setValue(cfg.getDrumsReverbSlider());
        drumsChorusSlider.setValue(cfg.getDrumsChorusSlider());
        outlineSkipSlider.setValue((cfg.getOutlineSkipSlider()));
        loopingCheckBox.setSelected(cfg.isLoopingCheckBox());
        paletteDensitySpinner.setValue(cfg.getPaletteDensitySpinner());
    }

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">

//        FlatLightLaf.setup();
//        FlatDarkLaf.setup();
        FlatDarculaLaf.setup();

        //</editor-fold>

        executionModeExitCode = Utilities.testExecutionMode();
        System.out.println("ExecutionModeExitCode is: " + executionModeExitCode);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmgApp().setVisible(true);
            }
        });
    }

    // Getters  
    public AKernel getKernel() {
        return kernel;
    }

    public ExecutorService getAudioExecutorService() {
        return audioExecutorService;
    }
    
    public ExecutorService getFractalExecutorService() {
        return fractalExecutorService;
    }    

    public Configurator getConfigurator() {
        return cfg;
    }

    public void setConfigurator(Configurator cfg) {
        this.cfg = cfg;
    }

    public SoundGenerator getSoundGenerator() {
        return soundGenerator;
    }

    public Persistence getPersistence() {
        return persistence;
    }

    public SoundbankManager getSoundbankManager() {
        return soundbankManager;
    }
    
    public FractalPanel getFractalPanel() {
        return fractalPanel;
    }
    
    public ColorPanel getColorPanel() {
        return colorPanel;
    }
    
    public RenderManager getRenderManager() {
        return renderManager;
    }

    public JSlider getMaxAudioIterationsSlider() {
        return maxAudioIterationsSlider;
    }

    public JRadioButton getDirectRadioButton() {
        return directRadioButton;
    }

    public JRadioButton getSineRadioButton() {
        return sineRadioButton;
    }

    public JSlider getMaxSdlSlider() {
        return maxSdlSlider;
    }

    public JToggleButton getWaveToggleButton() {
        return waveToggleButton;
    }

    public JToggleButton getMelodyToggleButton() {
        return melodyToggleButton;
    }

    public JToggleButton getDrumsToggleButton() {
        return drumsToggleButton;
    }

    public JCheckBox getDrawOrbitsCheckBox() {
        return drawOrbitsCheckBox;
    }

    public JSlider getOutlineSpeedSlider() {
        return outlineSpeedSlider;
    }

    public JSpinner getBufferSizeSpinner() {
        return bufferSizeSpinner;
    }

    public JSlider getDurationWaveSlider() {
        return durationWaveSlider;
    }

    public JSpinner getInterpolationPointsSpinner() {
        return interpolationPointsSpinner;
    }

    public JSpinner getKeepOrbitSpinner() {
        return keepOrbitSpinner;
    }

    public JSpinner getBufferPollingSpinner() {
        return bufferPollingSpinner;
    }

    public JSlider getVolumeWaveSlider() {
        return volumeWaveSlider;
    }

    public JSpinner getMaxFreqSpinner() {
        return maxFreqSpinner;
    }

    public JSpinner getMaxZxDirectSpinner() {
        return maxZxDirectSpinner;
    }

    public JSpinner getMaxZyDirectSpinner() {
        return maxZyDirectSpinner;
    }

    public JSpinner getMaxZySineSpinner() {
        return maxZySineSpinner;
    }

    public JSpinner getMinFreqSpinner() {
        return minFreqSpinner;
    }

    public JSpinner getMinZxDirectSpinner() {
        return minZxDirectSpinner;
    }

    public JSpinner getMinZyDirectSpinner() {
        return minZyDirectSpinner;
    }

    public JSpinner getMinZySineSpinner() {
        return minZySineSpinner;
    }

    public JTextArea getTab1TextArea() {
        return tab1TextArea;
    }

    public JSlider getMaxSequencersSlider() {
        return maxSequencersSlider;
    }

    public JSlider getNoteDurationSlider() {
        return noteDurationSlider;
    } 

    public JSlider getNoteVelocitySlider() {
        return noteVelocitySlider;
    }

    public JSlider getSequenceSpeedSlider() {
        return sequenceSpeedSlider;
    }

    public JCheckBox getPreventInterruptionsCheckBox() {
        return preventInterruptionsCheckBox;
    }

    public JCheckBox getSkipDivergentMidiCheckBox() {
        return skipDivergentMidiCheckBox;
    }

    public JCheckBox getInstrChangeEffectCheckBox() {
        return instrChangeEffectCheckBox;
    }

    public JCheckBox getPanMidiEffectCheckBox() {
        return panMidiEffectCheckBox;
    }

    public JSpinner getMaxMidiEffectSpinner() {
        return maxMidiEffectSpinner;
    }

    public JSpinner getMaxNoteSpinner() {
        return maxNoteSpinner;
    }

    public JSpinner getMaxZxMidiSpinner() {
        return maxZxMidiSpinner;
    }

    public JSpinner getMaxZyMidiSpinner() {
        return maxZyMidiSpinner;
    }

    public JSpinner getMinMidiEffectSpinner() {
        return minMidiEffectSpinner;
    }

    public JSpinner getMinNoteSpinner() {
        return minNoteSpinner;
    }

    public JSpinner getMinZxMidiSpinner() {
        return minZxMidiSpinner;
    }

    public JSpinner getMinZyMidiSpinner() {
        return minZyMidiSpinner;
    }

    public JCheckBox getVerboseCheckBox() {
        return verboseCheckBox;
    }

    public JCheckBox getSkipDivergentWaveCheckBox() {
        return skipDivergentWaveCheckBox;
    }

    public JCheckBox getDrumsChangeEffectCheckBox() {
        return drumsChangeEffectCheckBox;
    }

    public JSlider getDrumsNoteDurationSlider() {
        return drumsNoteDurationSlider;
    }

    public JSpinner getDrumsMaxMidiEffectSpinner() {
        return drumsMaxMidiEffectSpinner;
    }

    public JSpinner getDrumsMaxNoteSpinner() {
        return drumsMaxNoteSpinner;
    }

    public JSlider getDrumsMaxSequencersSlider() {
        return drumsMaxSequencersSlider;
    }

    public JSpinner getDrumsMaxZxMidiSpinner() {
        return drumsMaxZxMidiSpinner;
    }

    public JSpinner getDrumsMaxZyMidiSpinner() {
        return drumsMaxZyMidiSpinner;
    }

    public JSpinner getDrumsMinMidiEffectSpinner() {
        return drumsMinMidiEffectSpinner;
    }

    public JSpinner getDrumsMinNoteSpinner() {
        return drumsMinNoteSpinner;
    }

    public JSpinner getDrumsMinZxMidiSpinner() {
        return drumsMinZxMidiSpinner;
    }

    public JSpinner getDrumsMinZyMidiSpinner() {
        return drumsMinZyMidiSpinner;
    }

    public JCheckBox getDrumsPanMidiEffectCheckBox() {
        return drumsPanMidiEffectCheckBox;
    }

    public JCheckBox getDrumsPreventInterruptionsCheckBox() {
        return drumsPreventInterruptionsCheckBox;
    }

    public JSlider getDrumsSequenceSpeedSlider() {
        return drumsSequenceSpeedSlider;
    }

    public JCheckBox getDrumsSkipDivergentMidiCheckBox() {
        return drumsSkipDivergentMidiCheckBox;
    }

    public JSlider getDrumsVelocitySlider() {
        return drumsVelocitySlider;
    }

    public JSlider getOutlineSpeedRandomnessSlider() {
        return outlineSpeedRandomnessSlider;
    }

    public JCheckBox getDrawCoordinatesCheckBox() {
        return drawCoordinatesCheckBox;
    }

    public JList<String> getDrumkitsList() {
        return drumkitsList;
    }

    public JList<String> getInstrumentsMelodyList() {
        return instrumentsMelodyList;
    }
   
    public DeviceManager getDeviceManager() {
        return deviceManager;
    }

    public JTable getExternalDevicesTable() {
        return externalDevicesTable;
    }

    public JToggleButton getDumpToggleButton() {
        return dumpToggleButton;
    }

    public JToggleButton getGervillToggleButton() {
        return gervillToggleButton;
    }

    public JToggleButton getJackToggleButton() {
        return jackToggleButton;
    }

    public JToggleButton getLockOutlineToggleButton() {
        return lockOutlineToggleButton;
    }

    public JCheckBox getDrumsInitInstrumentsCheckBox() {
        return drumsInitInstrumentsCheckBox;
    }

    public JCheckBox getInitInstrumentsCheckBox() {
        return initInstrumentsCheckBox;
    }

    public JCheckBox getHistogramCheckBox() {
        return histogramCheckBox;
    }

    public JCheckBox getSmoothCheckBox() {
        return smoothCheckBox;
    }

    public JSlider getMaxImageIterationsSlider() {
        return maxImageIterationsSlider;
    } // check if used
    
    public JCheckBox getAutoImageIterationsCheckBox() {
        return autoImageIterationsCheckBox;
    }

    public JButton getColor0Button() {
        return color0Button;
    }

    public JButton getColor1Button() {
        return color1Button;
    }

    public JButton getColor2Button() {
        return color2Button;
    }

    public JButton getColor3Button() {
        return color3Button;
    }

    public JButton getColor4Button() {
        return color4Button;
    }

    public JButton getColor5Button() {
        return color5Button;
    }

    public JButton getColor6Button() {
        return color6Button;
    }

    public JButton getColor7Button() {
        return color7Button;
    }

    public JButton getColor8Button() {
        return color8Button;
    }
    
    public JButton getColor9Button() {
        return color9Button;
    }

    public JSlider getColor0Slider() {
        return color0Slider;
    }
    
    public JSlider getColor1Slider() {
        return color1Slider;
    }
    
    public JSlider getColor2Slider() {
        return color2Slider;
    }
    
    public JSlider getColor3Slider() {
        return color3Slider;
    }
    
    public JSlider getColor4Slider() {
        return color4Slider;
    }
    
    public JSlider getColor5Slider() {
        return color5Slider;
    }
    
    public JSlider getColor6Slider() {
        return color6Slider;
    }
    
    public JSlider getColor7Slider() {
        return color7Slider;
    }
    
    public JSlider getColor8Slider() {
        return color8Slider;
    }

    public JSlider getChorusSlider() {
        return chorusSlider;
    }

    public JSlider getReverbSlider() {
        return reverbSlider;
    }

    public JSlider getDrumsReverbSlider() {
        return drumsReverbSlider;
    }
        
    public JSlider getDrumsChorusSlider() {
        return drumsChorusSlider;
    }
    
    public JSlider getOutlineSkipSlider() {
        return outlineSkipSlider;
    }

    public JCheckBox getLoopingCheckBox() {
        return loopingCheckBox;
    }
    
    public JSpinner getPaletteDensitySpinner() {
        return paletteDensitySpinner;
    }
    
    public JButton getOutlinePlayButton() {
        return outlinePlayButton;
    }
    
    public JButton getResetButton() {
        return resetButton;
    }
    
    public JToggleButton getRecorderToggleButton() {
        return recorderToggleButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel audioIterationPanel;
    private javax.swing.JPanel audioTypePanel;
    private javax.swing.JCheckBox autoImageIterationsCheckBox;
    private javax.swing.JLabel bufferPollingLabel;
    private javax.swing.JSpinner bufferPollingSpinner;
    private javax.swing.JLabel bufferSizeLabel;
    private javax.swing.JSpinner bufferSizeSpinner;
    private javax.swing.JPanel chorusPanel;
    private javax.swing.JSlider chorusSlider;
    private javax.swing.JButton color0Button;
    private javax.swing.JSlider color0Slider;
    private javax.swing.JButton color1Button;
    private javax.swing.JSlider color1Slider;
    private javax.swing.JButton color2Button;
    private javax.swing.JSlider color2Slider;
    private javax.swing.JButton color3Button;
    private javax.swing.JSlider color3Slider;
    private javax.swing.JButton color4Button;
    private javax.swing.JSlider color4Slider;
    private javax.swing.JButton color5Button;
    private javax.swing.JSlider color5Slider;
    private javax.swing.JButton color6Button;
    private javax.swing.JSlider color6Slider;
    private javax.swing.JButton color7Button;
    private javax.swing.JSlider color7Slider;
    private javax.swing.JButton color8Button;
    private javax.swing.JSlider color8Slider;
    private javax.swing.JButton color9Button;
    private org.betaiotazeta.fractalmusicgenerator.ColorPanel colorPanel;
    private javax.swing.JPanel colorSetupPanel;
    private javax.swing.JPanel directConversionPanel;
    private javax.swing.JPanel directLeftConversionPanel;
    private javax.swing.JRadioButton directRadioButton;
    private javax.swing.JPanel directRightConversionPanel;
    private javax.swing.JMenuItem donateMenuItem;
    private javax.swing.JCheckBox drawCoordinatesCheckBox;
    private javax.swing.JCheckBox drawOrbitsCheckBox;
    private javax.swing.JList<String> drumkitsList;
    private javax.swing.JPanel drumkitsPanel;
    private javax.swing.JScrollPane drumkitsScrollPane;
    private javax.swing.JCheckBox drumsChangeEffectCheckBox;
    private javax.swing.JPanel drumsChorusPanel;
    private javax.swing.JSlider drumsChorusSlider;
    private javax.swing.JPanel drumsGeneralMidiControlsPanel;
    private javax.swing.JPanel drumsImaginaryConversionPanel;
    private javax.swing.JCheckBox drumsInitInstrumentsCheckBox;
    private javax.swing.JLabel drumsMaxMidiEffectLabel;
    private javax.swing.JSpinner drumsMaxMidiEffectSpinner;
    private javax.swing.JLabel drumsMaxNoteLabel;
    private javax.swing.JSpinner drumsMaxNoteSpinner;
    private javax.swing.JPanel drumsMaxSequencersPanel;
    private javax.swing.JSlider drumsMaxSequencersSlider;
    private javax.swing.JLabel drumsMaxZxMidiLabel;
    private javax.swing.JSpinner drumsMaxZxMidiSpinner;
    private javax.swing.JLabel drumsMaxZyMidiLabel;
    private javax.swing.JSpinner drumsMaxZyMidiSpinner;
    private javax.swing.JLabel drumsMinMidiEffectLabel;
    private javax.swing.JSpinner drumsMinMidiEffectSpinner;
    private javax.swing.JLabel drumsMinNoteLabel;
    private javax.swing.JSpinner drumsMinNoteSpinner;
    private javax.swing.JLabel drumsMinZxMidiLabel;
    private javax.swing.JSpinner drumsMinZxMidiSpinner;
    private javax.swing.JLabel drumsMinZyMidiLabel;
    private javax.swing.JSpinner drumsMinZyMidiSpinner;
    private javax.swing.JPanel drumsNoteDurationPanel;
    private javax.swing.JSlider drumsNoteDurationSlider;
    private javax.swing.JCheckBox drumsPanMidiEffectCheckBox;
    private javax.swing.JCheckBox drumsPreventInterruptionsCheckBox;
    private javax.swing.JPanel drumsRealConversionPanel;
    private javax.swing.JPanel drumsReverbPanel;
    private javax.swing.JSlider drumsReverbSlider;
    private javax.swing.JPanel drumsSequenceSpeedPanel;
    private javax.swing.JSlider drumsSequenceSpeedSlider;
    private javax.swing.JCheckBox drumsSkipDivergentMidiCheckBox;
    private javax.swing.JToggleButton drumsToggleButton;
    private javax.swing.JPanel drumsVelocityPanel;
    private javax.swing.JSlider drumsVelocitySlider;
    private javax.swing.JToggleButton dumpToggleButton;
    private javax.swing.JPanel durationWavePanel;
    private javax.swing.JSlider durationWaveSlider;
    private javax.swing.JPanel externalDevicesPanel;
    private javax.swing.JTable externalDevicesTable;
    private javax.swing.JPanel fractalControlPanel;
    private org.betaiotazeta.fractalmusicgenerator.FractalPanel fractalPanel;
    private javax.swing.JComboBox<String> fractalsComboBox;
    private javax.swing.JPanel generalMidiControlsPanel;
    private javax.swing.JPanel generalWaveControlsPanel;
    private javax.swing.JToggleButton gervillToggleButton;
    private javax.swing.JLabel gpuInfoLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBox histogramCheckBox;
    private javax.swing.JPanel imageIterationsPanel;
    private javax.swing.JPanel imaginaryConversionPanel;
    private javax.swing.JPanel informationsPanel;
    private javax.swing.JCheckBox initInstrumentsCheckBox;
    private javax.swing.JCheckBox instrChangeEffectCheckBox;
    private javax.swing.JList<String> instrumentsMelodyList;
    private javax.swing.JPanel instrumentsPanel;
    private javax.swing.JScrollPane instrumentsScrollPane;
    private javax.swing.JLabel interpolationPointsLabel;
    private javax.swing.JSpinner interpolationPointsSpinner;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jackToggleButton;
    private javax.swing.JLabel keepOrbitLabel;
    private javax.swing.JSpinner keepOrbitSpinner;
    private javax.swing.JMenuItem loadDefaultSoundbankMenuItem;
    private javax.swing.JMenuItem loadSoundbankMenuItem;
    private javax.swing.JToggleButton lockOutlineToggleButton;
    private javax.swing.JCheckBox loopingCheckBox;
    private javax.swing.JSlider maxAudioIterationsSlider;
    private javax.swing.JLabel maxFreqLabel;
    private javax.swing.JSpinner maxFreqSpinner;
    private javax.swing.JSlider maxImageIterationsSlider;
    private javax.swing.JLabel maxMidiEffectLabel;
    private javax.swing.JSpinner maxMidiEffectSpinner;
    private javax.swing.JLabel maxNoteLabel;
    private javax.swing.JSpinner maxNoteSpinner;
    private javax.swing.JPanel maxSdlPanel;
    private javax.swing.JSlider maxSdlSlider;
    private javax.swing.JPanel maxSequencersPanel;
    private javax.swing.JSlider maxSequencersSlider;
    private javax.swing.JLabel maxZxDirectLabel;
    private javax.swing.JSpinner maxZxDirectSpinner;
    private javax.swing.JLabel maxZxMidiLabel;
    private javax.swing.JSpinner maxZxMidiSpinner;
    private javax.swing.JLabel maxZyDirectLabel;
    private javax.swing.JSpinner maxZyDirectSpinner;
    private javax.swing.JLabel maxZyMidiLabel;
    private javax.swing.JSpinner maxZyMidiSpinner;
    private javax.swing.JLabel maxZySineLabel;
    private javax.swing.JSpinner maxZySineSpinner;
    private javax.swing.JToggleButton melodyToggleButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPopupMenu.Separator menuHelpSeparator;
    private javax.swing.JPopupMenu.Separator menuProjectSeparator;
    private javax.swing.JLabel minFreqLabel;
    private javax.swing.JSpinner minFreqSpinner;
    private javax.swing.JLabel minMidiEffectLabel;
    private javax.swing.JSpinner minMidiEffectSpinner;
    private javax.swing.JLabel minNoteLabel;
    private javax.swing.JSpinner minNoteSpinner;
    private javax.swing.JLabel minZxDirectLabel;
    private javax.swing.JSpinner minZxDirectSpinner;
    private javax.swing.JLabel minZxMidiLabel;
    private javax.swing.JSpinner minZxMidiSpinner;
    private javax.swing.JLabel minZyDirectLabel;
    private javax.swing.JSpinner minZyDirectSpinner;
    private javax.swing.JLabel minZyMidiLabel;
    private javax.swing.JSpinner minZyMidiSpinner;
    private javax.swing.JLabel minZySineLabel;
    private javax.swing.JSpinner minZySineSpinner;
    private javax.swing.JPanel noteDurationPanel;
    private javax.swing.JSlider noteDurationSlider;
    private javax.swing.JPanel noteVelocityPanel;
    private javax.swing.JSlider noteVelocitySlider;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JButton outlinePlayButton;
    private javax.swing.JSlider outlineSkipSlider;
    private javax.swing.JSlider outlineSpeedRandomnessSlider;
    private javax.swing.JSlider outlineSpeedSlider;
    private javax.swing.JLabel paletteDensityLabel;
    private javax.swing.JSpinner paletteDensitySpinner;
    private javax.swing.JLabel palettePresetsLabel;
    private javax.swing.JCheckBox panMidiEffectCheckBox;
    private javax.swing.JPanel performancePanel;
    private javax.swing.JPanel playPanel;
    private javax.swing.JButton presetBlankButton;
    private javax.swing.JButton presetHueButton;
    private javax.swing.JButton presetRandomButton;
    private javax.swing.JButton presetWikiButton;
    private javax.swing.JMenuItem presetsProjectMenuItem;
    private javax.swing.JCheckBox preventInterruptionsCheckBox;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JPanel randomnessPanel;
    private javax.swing.JPanel realConversionPanel;
    private javax.swing.JPanel recorderPanel;
    private javax.swing.JToggleButton recorderToggleButton;
    private javax.swing.JLabel renderingInfoLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel reverbPanel;
    private javax.swing.JSlider reverbSlider;
    private javax.swing.JMenuItem saveProjectMenuItem;
    private javax.swing.JPanel sequenceSpeedPanel;
    private javax.swing.JSlider sequenceSpeedSlider;
    private javax.swing.JPanel sineConversionPanel;
    private javax.swing.JRadioButton sineRadioButton;
    private javax.swing.JCheckBox skipDivergentMidiCheckBox;
    private javax.swing.JCheckBox skipDivergentWaveCheckBox;
    private javax.swing.JPanel skipPanel;
    private javax.swing.JCheckBox smoothCheckBox;
    private javax.swing.JMenu soundbankMenu;
    private javax.swing.JPanel speedPanel;
    private javax.swing.JScrollPane tab1AreaScrollPane;
    private javax.swing.JPanel tab1ControlsPanel;
    private javax.swing.JScrollPane tab1ControlsScrollPane;
    private javax.swing.JSplitPane tab1ControlsSplitPane;
    private javax.swing.JSplitPane tab1FractalSplitPane;
    private javax.swing.JPanel tab1MainPanel;
    private javax.swing.JTextArea tab1TextArea;
    private javax.swing.JPanel tab2GridBagPanel;
    private javax.swing.JPanel tab2MainPanel;
    private javax.swing.JPanel tab3GridBagPanel;
    private javax.swing.JPanel tab3MainPanel;
    private javax.swing.JPanel tab4MainPanel;
    private javax.swing.JPanel tab5GridBagPanel;
    private javax.swing.JPanel tab5MainPanel;
    private javax.swing.JPanel tab6MainPanel;
    private javax.swing.JPanel tab7MainPanel;
    private javax.swing.JPanel tab8MainPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel threadsInfoLabel;
    private javax.swing.JPanel toggleDevicesPanel;
    private javax.swing.JMenuItem unloadAllInstrumentsMenuItem;
    private javax.swing.JButton updateDevicesTableButton;
    private javax.swing.JPanel updateDevicesTablePanel;
    private javax.swing.JCheckBox verboseCheckBox;
    private javax.swing.JLabel voicesInfoLabel;
    private javax.swing.JPanel volumeWavePanel;
    private javax.swing.JSlider volumeWaveSlider;
    private javax.swing.JPanel waveSourcePanel;
    private javax.swing.JToggleButton waveToggleButton;
    private javax.swing.ButtonGroup waveTypeButtonGroup;
    private javax.swing.JMenuItem websiteMenuItem;
    private javax.swing.JLabel writeInfoLabel;
    private javax.swing.JMenuItem youtubeMenuItem;
    // End of variables declaration//GEN-END:variables

    // Custom variables
    static private int executionModeExitCode;
    private AKernel kernel;
    private ExecutorService audioExecutorService;
    private ExecutorService fractalExecutorService;
    private Configurator cfg;
    private SoundGenerator soundGenerator;
    private Persistence persistence;
    private SoundbankManager soundbankManager;
    private DeviceManager deviceManager;
    private RenderManager renderManager;
    private String nl = System.lineSeparator();
    private int toolTipDismissDelay = Integer.MAX_VALUE;  // 4000
    private Timer timer;
}
