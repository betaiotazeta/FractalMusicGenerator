package org.betaiotazeta.fractalmusicgenerator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;

public class ColorPanel extends javax.swing.JPanel {

    public ColorPanel() {
        // used only for Gui Builder
    }
    
    public ColorPanel(FmgApp fmgApp) {
        this.fmgApp = fmgApp;
        initComponents();
        setupButtonsArray();
        setupSlidersArray();
        JSlider sliderLast = new JSlider(0, 100, 100);
        slidersArrayList.add(sliderLast);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setupButtonsArray() {
        buttonsArrayList.add(fmgApp.getColor0Button());
        buttonsArrayList.add(fmgApp.getColor1Button());
        buttonsArrayList.add(fmgApp.getColor2Button());
        buttonsArrayList.add(fmgApp.getColor3Button());
        buttonsArrayList.add(fmgApp.getColor4Button());
        buttonsArrayList.add(fmgApp.getColor5Button());
        buttonsArrayList.add(fmgApp.getColor6Button());
        buttonsArrayList.add(fmgApp.getColor7Button());
        buttonsArrayList.add(fmgApp.getColor8Button());
        buttonsArrayList.add(fmgApp.getColor9Button());
    }
    
    private void setupSlidersArray() {
        slidersArrayList.add(fmgApp.getColor0Slider());
        slidersArrayList.add(fmgApp.getColor1Slider());
        slidersArrayList.add(fmgApp.getColor2Slider());
        slidersArrayList.add(fmgApp.getColor3Slider());
        slidersArrayList.add(fmgApp.getColor4Slider());
        slidersArrayList.add(fmgApp.getColor5Slider());
        slidersArrayList.add(fmgApp.getColor6Slider());
        slidersArrayList.add(fmgApp.getColor7Slider());
        slidersArrayList.add(fmgApp.getColor8Slider());
    }

    public void selectColor(ActionEvent evt) {
        JButton button = (JButton) evt.getSource();
        Color oldColor = button.getBackground();
        Color newColor = JColorChooser.showDialog(fmgApp, "Select Color", oldColor);
        if (newColor != null) {
            if (newColor.equals(Color.BLACK)) {
                newColor = new Color(1, 1, 1);
            }
            button.setBackground(newColor);
        }
        createPalette();
    }
    
    public void adjustGradient(int sliderNumber, ChangeEvent evt) {
        JSlider slider = (JSlider) evt.getSource();
        int value = slider.getValue();
        
        if (sliderNumber < 8) {
            int valueHigher = slidersArrayList.get(sliderNumber + 1).getValue();
            if (value > valueHigher) {
                slidersArrayList.get(sliderNumber + 1).setValue(value);
            }
        }
        
        if (sliderNumber > 0) {
            int valueLower = slidersArrayList.get(sliderNumber - 1).getValue();
            if (value < valueLower) {
                slidersArrayList.get(sliderNumber - 1).setValue(value);
            }
        }        

        createPalette();
    }
    
    public void createPalette() {
        // index[0] is used for no iterations, index[PALETTELENGTH] for convergence
        // index[PALETTELENGTH] exists but a value is never assigned (it stays at 0)
        // PALETTELENGTH = 100, is an arbitrary value
        // colors will cycle for higher values of maxImageIterations
        int[] colorsArray = new int[PALETTELENGTH + 1];
        int color1 = buttonsArrayList.get(9).getBackground().getRGB(); 
        int sliderLow = 0;
        
        for (int i = 0; i < 10; i++) {         
            int color2 = buttonsArrayList.get(i).getBackground().getRGB();
            int sliderHigh = slidersArrayList.get(i).getValue();
            double fraction = 1d / (sliderHigh - sliderLow);
            double fractionTotal = 0;

            for (int j = sliderLow; j < sliderHigh; j++) {
                // color3 = linearInterpolate(color1, color2, fraction)
                int red1 = (color1 >> 16) & 0xFF;
                int green1 = (color1 >> 8) & 0xFF;
                int blue1 = color1 & 0xFF;
                int red2 = (color2 >> 16) & 0xFF;
                int green2 = (color2 >> 8) & 0xFF;
                int blue2 = color2 & 0xFF;

                int red3 = (int) ((red2 - red1) * fractionTotal + red1);
                int green3 = (int) ((green2 - green1) * fractionTotal + green1);
                int blue3 = (int) ((blue2 - blue1) * fractionTotal + blue1);

                int color3 = red3;
                color3 = (color3 << 8) + green3;
                color3 = (color3 << 8) + blue3;
                
                fractionTotal = fractionTotal + fraction;
                colorsArray[j] = color3;
            }
            sliderLow = sliderHigh;
            color1 = color2;
        }
        fmgApp.getFractalPanel().setColorsArray(colorsArray);
        drawPreviewColors();
        fmgApp.getFractalPanel().calculateFractal();
    }
    
    public void drawPreviewColors() {
        int[] colorsArray = fmgApp.getFractalPanel().getColorsArray();
        int width = this.getWidth();
        int height = this.getHeight();
        imagePreviewColors = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = imagePreviewColors.createGraphics();
        double rectWidth = (width - 20d) / PALETTELENGTH;
        double totalWidth = 10;
        for (int i = 0; i < PALETTELENGTH; i++) {
            Color color = new Color(colorsArray[i]);
            g2d.setColor(color);
            g2d.fillRect( (int) totalWidth, 20, (int) Math.ceil(rectWidth), height - 30);
            totalWidth = totalWidth + rectWidth;
        }
        g2d.dispose();
        repaint();
    }      
    
    public void applyPreset(int[] pattern) {
        fmgApp.getColor0Button().setBackground(new Color(pattern[0]));
        fmgApp.getColor1Button().setBackground(new Color(pattern[1]));
        fmgApp.getColor2Button().setBackground(new Color(pattern[2]));
        fmgApp.getColor3Button().setBackground(new Color(pattern[3]));
        fmgApp.getColor4Button().setBackground(new Color(pattern[4]));
        fmgApp.getColor5Button().setBackground(new Color(pattern[5]));
        fmgApp.getColor6Button().setBackground(new Color(pattern[6]));
        fmgApp.getColor7Button().setBackground(new Color(pattern[7]));
        fmgApp.getColor8Button().setBackground(new Color(pattern[8]));
        fmgApp.getColor9Button().setBackground(new Color(pattern[9]));
        fmgApp.getColor0Slider().setValue(pattern[10]);
        fmgApp.getColor1Slider().setValue(pattern[11]);
        fmgApp.getColor2Slider().setValue(pattern[12]);
        fmgApp.getColor3Slider().setValue(pattern[13]);
        fmgApp.getColor4Slider().setValue(pattern[14]);
        fmgApp.getColor5Slider().setValue(pattern[15]);
        fmgApp.getColor6Slider().setValue(pattern[16]);
        fmgApp.getColor7Slider().setValue(pattern[17]);
        fmgApp.getColor8Slider().setValue(pattern[18]);
    }
    
    public void applyRandomPreset() {
        Random random = new Random();
        int range = 256;
        int[] valueRGB = new int[3];
        for (int i = 0; i < buttonsArrayList.size(); i++) {
            for (int j = 0; j < 3; j++) {
                int value = random.nextInt(range);
                valueRGB[j] = value;
            }
            Color color = new Color(valueRGB[0], valueRGB[1], valueRGB[2]);
            if (color.equals(Color.BLACK)) {
                color = new Color(1, 1, 1);
            }
            buttonsArrayList.get(i).setBackground(color);
        }
        int valueOld = 0;
        range = PALETTELENGTH;
        for (int i = 0; i < slidersArrayList.size() - 1; i++) {
            int value = random.nextInt(range);
            slidersArrayList.get(i).setValue(valueOld + value);
            range = range - value;
            valueOld = valueOld + value;
        }
    }
    
    @Override
    public void paintComponent(Graphics g) {
        // it is used to draw a vanilla background
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawImage(imagePreviewColors, 0, 0, this);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    // Custom variables
    FmgApp fmgApp;
    BufferedImage imagePreviewColors;
    ArrayList<JButton> buttonsArrayList = new ArrayList<>(9);
    ArrayList<JSlider> slidersArrayList = new ArrayList<>(9);
    public static final int PALETTELENGTH = 100;
    
    public final int[] HUEPATTERN = new int[] {-256, -16711936, -16711681, -16776961, -65281, -65281, -65281, -65281, -65281, -65536, 17, 31, 51, 67, 83, 83, 83, 83, 88};
    public final int[] BLANKPATTERN = new int[] {-11775918, -11775918, -11775918, -11775918, -11775918, -11775918, -11775918, -11775918, -11775918, -11775918, 10, 20, 30, 40, 50, 60, 70, 80, 90};
    public final int[] WIKIPATTERN = new int[] {-14652469, -1179649, -22016, 512, 512, 512, 512, 512, 512, -16775324, 16, 42, 64, 86, 86, 86, 86, 86, 86};
}
